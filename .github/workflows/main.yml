on: push

jobs:

  matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}

    steps:
      - id: set-matrix
        run: |
          #matrix=$(./command-to-find-testcases.sh)
          matrix='{"subcommand": ["df", "gs", "cp"], "include": [{"subcommand": "md5", "optionalArgs": "@s"}]}'
          echo $matrix
          echo $matrix | jq .
          echo "matrix=$matrix" >> $GITHUB_OUTPUT

  mayhem-async:
    runs-on: ubuntu-latest
    name: 'fuzz'
    needs: matrix
    
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.matrix.outputs.matrix) }}
#       matrix: 
#         subcommand: ["df", "gs", "cp"]
#         # The include keyword that adds a new variable
#         include:
#           - subcommand: md5
#             optionalArgs: "@s"

    steps:
      - id: run-mayhem-async
        name: Simulating an async Mayhem run, resulting in a runId
        run: |
          echo "runId=runId-of-${{ matrix.subcommand }} ${{ matrix.optionalArgs }}" >> $GITHUB_OUTPUT

       ## Write for matrix outputs workaround 
      - uses: cloudposse/github-action-matrix-outputs-write@0.3.1
        id: out
        with:
          matrix-step-name: run-mayhem-async
          matrix-key: ${{ matrix.subcommand }}
          outputs: |-
             runId: ${{ steps.run-mayhem-async.outputs.runId }}

  ## Read matrix outputs 
  read:
    runs-on: ubuntu-latest
    needs: [mayhem-async]
    steps:
      - uses: cloudposse/github-action-matrix-outputs-read@0.1.1
        id: read
        with:
          matrix-step-name: run-mayhem-async

    outputs:
      result: "${{ steps.read.outputs.result }}"

  check-mayhem-result:
    runs-on: ubuntu-latest
    needs: [mayhem-async, matrix, read]

    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.matrix.outputs.matrix)}}

    steps:
      - id: mayhem-check
        name: Simulate checking results from async Mayhem jobs
        run: |
          echo ${{ fromJson(needs.read.outputs.result).runId[matrix.subcommand] }}


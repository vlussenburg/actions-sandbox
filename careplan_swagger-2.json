{
  "openapi": "3.0.1",
  "info": {
    "title": "Care Plan API",
    "version": "1"
  },
  "servers": [
    {
      "url": "https://dev-careplan.smartsuite-cataract.com",
      "description": "Generated server url"
    }
  ],
  "paths": {
    "/careplan": {
      "put": {
        "tags": [
          "care-plan-controller"
        ],
        "summary": "Updates the case data for a patient.",
        "description": "Updates the case data for a patient.",
        "operationId": "updateCase",
        "parameters": [
          {
            "name": "api-version",
            "in": "header",
            "description": "api version",
            "required": false,
            "schema": {
              "type": "string",
              "default": "1"
            }
          },
          {
            "name": "patientId",
            "in": "query",
            "description": "The unique identifier of the patient.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/uuid",
              "example": "133d9d7b-a731-45b3-a5e8-b7931a2ae64e"
            }
          },
          {
            "name": "requestId",
            "in": "header",
            "description": "The unique identifier of the request.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "requestBody": {
          "description": "The case data to update with.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Case"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "requestId": {
                "description": "The request id, either internally generated or taken from the request header.",
                "style": "simple",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatientAndSummaryCase"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "headers": {
              "requestId": {
                "description": "The request id, either internally generated or taken from the request header.",
                "style": "simple",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseBody"
                },
                "examples": {
                  "BadRequestExample": {
                    "$ref": "#/components/examples/BadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "headers": {
              "requestId": {
                "description": "The request id, either internally generated or taken from the request header.",
                "style": "simple",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseBody"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "headers": {
              "requestId": {
                "description": "The request id, either internally generated or taken from the request header.",
                "style": "simple",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseBody"
                },
                "examples": {
                  "ForbiddenExample": {
                    "$ref": "#/components/examples/ForbiddenExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Invalid ID supplied",
            "headers": {
              "requestId": {
                "description": "The request id, either internally generated or taken from the request header.",
                "style": "simple",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseBody"
                }
              }
            }
          },
          "409": {
            "description": "Duplicate item",
            "headers": {
              "requestId": {
                "description": "The request id, either internally generated or taken from the request header.",
                "style": "simple",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseBody"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "headers": {
              "requestId": {
                "description": "The request id, either internally generated or taken from the request header.",
                "style": "simple",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseBody"
                },
                "examples": {
                  "InternalServerErrorExample": {
                    "$ref": "#/components/examples/InternalServerErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/careplan/timeOutCompletedDateTime": {
      "put": {
        "tags": [
          "care-plan-controller"
        ],
        "summary": "Updates the case data for a patient with timeout completed date and time.",
        "description": "Updates the case data for a patient with timeout completed date and time.",
        "operationId": "updateCaseForTimeOutCompletedDateTime",
        "parameters": [
          {
            "name": "api-version",
            "in": "header",
            "description": "api version",
            "required": false,
            "schema": {
              "type": "string",
              "default": "1"
            }
          },
          {
            "name": "caseId",
            "in": "query",
            "description": "The unique identifier of the case.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/uuid"
            }
          },
          {
            "name": "patientId",
            "in": "query",
            "description": "The unique identifier of the patient.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/uuid",
              "example": "133d9d7b-a731-45b3-a5e8-b7931a2ae64e"
            }
          },
          {
            "name": "timeOutCompletedDateTime",
            "in": "query",
            "description": "The timeout completed date and time to update with.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "requestId",
            "in": "header",
            "description": "The unique identifier of the request.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "requestId": {
                "description": "The request id, either internally generated or taken from the request header.",
                "style": "simple",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatientAndSummaryCase"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "headers": {
              "requestId": {
                "description": "The request id, either internally generated or taken from the request header.",
                "style": "simple",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseBody"
                },
                "examples": {
                  "BadRequestExample": {
                    "$ref": "#/components/examples/BadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "headers": {
              "requestId": {
                "description": "The request id, either internally generated or taken from the request header.",
                "style": "simple",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseBody"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "headers": {
              "requestId": {
                "description": "The request id, either internally generated or taken from the request header.",
                "style": "simple",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseBody"
                },
                "examples": {
                  "ForbiddenExample": {
                    "$ref": "#/components/examples/ForbiddenExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Invalid ID supplied",
            "headers": {
              "requestId": {
                "description": "The request id, either internally generated or taken from the request header.",
                "style": "simple",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseBody"
                }
              }
            }
          },
          "409": {
            "description": "Duplicate item",
            "headers": {
              "requestId": {
                "description": "The request id, either internally generated or taken from the request header.",
                "style": "simple",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseBody"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "headers": {
              "requestId": {
                "description": "The request id, either internally generated or taken from the request header.",
                "style": "simple",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseBody"
                },
                "examples": {
                  "InternalServerErrorExample": {
                    "$ref": "#/components/examples/InternalServerErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/careplan/surgicalPlan": {
      "put": {
        "tags": [
          "care-plan-controller"
        ],
        "summary": "Updates the surgical plan data in a case for a patient.",
        "description": "Updates the surgical plan data in a case for a patient.",
        "operationId": "updateSurgicalPlan",
        "parameters": [
          {
            "name": "api-version",
            "in": "header",
            "description": "api version",
            "required": false,
            "schema": {
              "type": "string",
              "default": "1"
            }
          },
          {
            "name": "caseId",
            "in": "query",
            "description": "The unique identifier of the case.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/uuid"
            }
          },
          {
            "name": "patientId",
            "in": "query",
            "description": "The unique identifier of the patient.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/uuid",
              "example": "133d9d7b-a731-45b3-a5e8-b7931a2ae64e"
            }
          },
          {
            "name": "requestId",
            "in": "header",
            "description": "The unique identifier of the request.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "requestBody": {
          "description": "The surgical plan data to update with.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SurgicalPlan"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "requestId": {
                "description": "The request id, either internally generated or taken from the request header.",
                "style": "simple",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatientAndSummaryCase"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "headers": {
              "requestId": {
                "description": "The request id, either internally generated or taken from the request header.",
                "style": "simple",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseBody"
                },
                "examples": {
                  "BadRequestExample": {
                    "$ref": "#/components/examples/BadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "headers": {
              "requestId": {
                "description": "The request id, either internally generated or taken from the request header.",
                "style": "simple",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseBody"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "headers": {
              "requestId": {
                "description": "The request id, either internally generated or taken from the request header.",
                "style": "simple",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseBody"
                },
                "examples": {
                  "ForbiddenExample": {
                    "$ref": "#/components/examples/ForbiddenExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Invalid ID supplied",
            "headers": {
              "requestId": {
                "description": "The request id, either internally generated or taken from the request header.",
                "style": "simple",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseBody"
                }
              }
            }
          },
          "409": {
            "description": "Duplicate item",
            "headers": {
              "requestId": {
                "description": "The request id, either internally generated or taken from the request header.",
                "style": "simple",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseBody"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "headers": {
              "requestId": {
                "description": "The request id, either internally generated or taken from the request header.",
                "style": "simple",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseBody"
                },
                "examples": {
                  "InternalServerErrorExample": {
                    "$ref": "#/components/examples/InternalServerErrorExample"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "care-plan-controller"
        ],
        "summary": "Adds surgical plan data to the case data for a patient.",
        "description": "Adds surgical plan data to the case data for a patient.",
        "operationId": "addNewSurgicalPlan",
        "parameters": [
          {
            "name": "api-version",
            "in": "header",
            "description": "api version",
            "required": false,
            "schema": {
              "type": "string",
              "default": "1"
            }
          },
          {
            "name": "caseId",
            "in": "query",
            "description": "The unique identifier of the case.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/uuid"
            }
          },
          {
            "name": "patientId",
            "in": "query",
            "description": "The unique identifier of the patient.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/uuid",
              "example": "133d9d7b-a731-45b3-a5e8-b7931a2ae64e"
            }
          },
          {
            "name": "requestId",
            "in": "header",
            "description": "The unique identifier of the request.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "requestBody": {
          "description": "The surgical plan data to add.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SurgicalPlan"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "requestId": {
                "description": "The request id, either internally generated or taken from the request header.",
                "style": "simple",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatientAndSummaryCase"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "headers": {
              "requestId": {
                "description": "The request id, either internally generated or taken from the request header.",
                "style": "simple",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseBody"
                },
                "examples": {
                  "BadRequestExample": {
                    "$ref": "#/components/examples/BadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "headers": {
              "requestId": {
                "description": "The request id, either internally generated or taken from the request header.",
                "style": "simple",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseBody"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "headers": {
              "requestId": {
                "description": "The request id, either internally generated or taken from the request header.",
                "style": "simple",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseBody"
                },
                "examples": {
                  "ForbiddenExample": {
                    "$ref": "#/components/examples/ForbiddenExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Invalid ID supplied",
            "headers": {
              "requestId": {
                "description": "The request id, either internally generated or taken from the request header.",
                "style": "simple",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseBody"
                }
              }
            }
          },
          "409": {
            "description": "Duplicate item",
            "headers": {
              "requestId": {
                "description": "The request id, either internally generated or taken from the request header.",
                "style": "simple",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseBody"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "headers": {
              "requestId": {
                "description": "The request id, either internally generated or taken from the request header.",
                "style": "simple",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseBody"
                },
                "examples": {
                  "InternalServerErrorExample": {
                    "$ref": "#/components/examples/InternalServerErrorExample"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "care-plan-controller"
        ],
        "summary": "Deletes the surgical plan data from a case for a patient.",
        "description": "Deletes the surgical plan data from a case for a patient.",
        "operationId": "deleteSurgicalPlan",
        "parameters": [
          {
            "name": "api-version",
            "in": "header",
            "description": "api version",
            "required": false,
            "schema": {
              "type": "string",
              "default": "1"
            }
          },
          {
            "name": "caseId",
            "in": "query",
            "description": "The unique identifier of the case.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/uuid"
            }
          },
          {
            "name": "patientId",
            "in": "query",
            "description": "The unique identifier of the patient.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/uuid",
              "example": "133d9d7b-a731-45b3-a5e8-b7931a2ae64e"
            }
          },
          {
            "name": "requestId",
            "in": "header",
            "description": "The unique identifier of the request.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "requestBody": {
          "description": "The surgical plan data to delete.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SurgicalPlan"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "requestId": {
                "description": "The request id, either internally generated or taken from the request header.",
                "style": "simple",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatientAndSummaryCase"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "headers": {
              "requestId": {
                "description": "The request id, either internally generated or taken from the request header.",
                "style": "simple",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseBody"
                },
                "examples": {
                  "BadRequestExample": {
                    "$ref": "#/components/examples/BadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "headers": {
              "requestId": {
                "description": "The request id, either internally generated or taken from the request header.",
                "style": "simple",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseBody"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "headers": {
              "requestId": {
                "description": "The request id, either internally generated or taken from the request header.",
                "style": "simple",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseBody"
                },
                "examples": {
                  "ForbiddenExample": {
                    "$ref": "#/components/examples/ForbiddenExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Invalid ID supplied",
            "headers": {
              "requestId": {
                "description": "The request id, either internally generated or taken from the request header.",
                "style": "simple",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseBody"
                }
              }
            }
          },
          "409": {
            "description": "Duplicate item",
            "headers": {
              "requestId": {
                "description": "The request id, either internally generated or taken from the request header.",
                "style": "simple",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseBody"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "headers": {
              "requestId": {
                "description": "The request id, either internally generated or taken from the request header.",
                "style": "simple",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseBody"
                },
                "examples": {
                  "InternalServerErrorExample": {
                    "$ref": "#/components/examples/InternalServerErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/careplan/startCase": {
      "put": {
        "tags": [
          "care-plan-controller"
        ],
        "summary": "Starts the case data for a patient.",
        "description": "Starts the case data for a patient.",
        "operationId": "startCase",
        "parameters": [
          {
            "name": "api-version",
            "in": "header",
            "description": "api version",
            "required": false,
            "schema": {
              "type": "string",
              "default": "1"
            }
          },
          {
            "name": "patientId",
            "in": "query",
            "description": "The unique identifier of the patient.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/uuid",
              "example": "133d9d7b-a731-45b3-a5e8-b7931a2ae64e"
            }
          },
          {
            "name": "requestId",
            "in": "header",
            "description": "The unique identifier of the request.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "requestBody": {
          "description": "The case data to add.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Case"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "requestId": {
                "description": "The request id, either internally generated or taken from the request header.",
                "style": "simple",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatientAndSummaryCase"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "headers": {
              "requestId": {
                "description": "The request id, either internally generated or taken from the request header.",
                "style": "simple",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseBody"
                },
                "examples": {
                  "BadRequestExample": {
                    "$ref": "#/components/examples/BadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "headers": {
              "requestId": {
                "description": "The request id, either internally generated or taken from the request header.",
                "style": "simple",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseBody"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "headers": {
              "requestId": {
                "description": "The request id, either internally generated or taken from the request header.",
                "style": "simple",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseBody"
                },
                "examples": {
                  "ForbiddenExample": {
                    "$ref": "#/components/examples/ForbiddenExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Invalid ID supplied",
            "headers": {
              "requestId": {
                "description": "The request id, either internally generated or taken from the request header.",
                "style": "simple",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseBody"
                }
              }
            }
          },
          "409": {
            "description": "Duplicate item",
            "headers": {
              "requestId": {
                "description": "The request id, either internally generated or taken from the request header.",
                "style": "simple",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseBody"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "headers": {
              "requestId": {
                "description": "The request id, either internally generated or taken from the request header.",
                "style": "simple",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseBody"
                },
                "examples": {
                  "InternalServerErrorExample": {
                    "$ref": "#/components/examples/InternalServerErrorExample"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "care-plan-controller"
        ],
        "summary": "Adds the case data for a patient.",
        "description": "Adds the case data for a patient.",
        "operationId": "addCaseForPatient",
        "parameters": [
          {
            "name": "api-version",
            "in": "header",
            "description": "api version",
            "required": false,
            "schema": {
              "type": "string",
              "default": "1"
            }
          },
          {
            "name": "patientId",
            "in": "query",
            "description": "The unique identifier of the patient to update.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/uuid",
              "example": "133d9d7b-a731-45b3-a5e8-b7931a2ae64e"
            }
          },
          {
            "name": "requestId",
            "in": "header",
            "description": "The unique identifier of the request.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "requestBody": {
          "description": "The case data to add.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Case"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "requestId": {
                "description": "The request id, either internally generated or taken from the request header.",
                "style": "simple",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatientAndSummaryCase"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "headers": {
              "requestId": {
                "description": "The request id, either internally generated or taken from the request header.",
                "style": "simple",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseBody"
                },
                "examples": {
                  "BadRequestExample": {
                    "$ref": "#/components/examples/BadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "headers": {
              "requestId": {
                "description": "The request id, either internally generated or taken from the request header.",
                "style": "simple",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseBody"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "headers": {
              "requestId": {
                "description": "The request id, either internally generated or taken from the request header.",
                "style": "simple",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseBody"
                },
                "examples": {
                  "ForbiddenExample": {
                    "$ref": "#/components/examples/ForbiddenExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Invalid ID supplied",
            "headers": {
              "requestId": {
                "description": "The request id, either internally generated or taken from the request header.",
                "style": "simple",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseBody"
                }
              }
            }
          },
          "409": {
            "description": "Duplicate item",
            "headers": {
              "requestId": {
                "description": "The request id, either internally generated or taken from the request header.",
                "style": "simple",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseBody"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "headers": {
              "requestId": {
                "description": "The request id, either internally generated or taken from the request header.",
                "style": "simple",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseBody"
                },
                "examples": {
                  "InternalServerErrorExample": {
                    "$ref": "#/components/examples/InternalServerErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/careplan/specificNote/update": {
      "put": {
        "tags": [
          "care-plan-controller"
        ],
        "summary": "Updates the Case by marking notes as read for specific categories and/or specific noteIds.",
        "description": "Updates the Case by marking notes as read for specific categories and/or specific noteIds.",
        "operationId": "updateSpecificNotesAsRead",
        "parameters": [
          {
            "name": "api-version",
            "in": "header",
            "description": "api version",
            "required": false,
            "schema": {
              "type": "string",
              "default": "1"
            }
          },
          {
            "name": "caseId",
            "in": "query",
            "description": "The unique identifier of the case.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/uuid"
            }
          },
          {
            "name": "patientId",
            "in": "query",
            "description": "The unique identifier of the patient.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/uuid",
              "example": "133d9d7b-a731-45b3-a5e8-b7931a2ae64e"
            }
          },
          {
            "name": "categories",
            "in": "query",
            "description": "The list of categories of the notes.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "(General, Planning, Consultation, ...)"
              }
            }
          },
          {
            "name": "noteIds",
            "in": "query",
            "description": "The list of unique identifiers of the notes.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/uuid"
              }
            }
          },
          {
            "name": "requestId",
            "in": "header",
            "description": "The unique identifier of the request.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "requestId": {
                "description": "The request id, either internally generated or taken from the request header.",
                "style": "simple",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatientAndSummaryCase"
                },
                "examples": {
                  "UpdateSpecificNotesAsReadResponseExample": {
                    "$ref": "#/components/examples/UpdateSpecificNotesAsReadResponseExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "headers": {
              "requestId": {
                "description": "The request id, either internally generated or taken from the request header.",
                "style": "simple",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseBody"
                },
                "examples": {
                  "BadRequestExample": {
                    "$ref": "#/components/examples/BadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "headers": {
              "requestId": {
                "description": "The request id, either internally generated or taken from the request header.",
                "style": "simple",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseBody"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "headers": {
              "requestId": {
                "description": "The request id, either internally generated or taken from the request header.",
                "style": "simple",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseBody"
                },
                "examples": {
                  "ForbiddenExample": {
                    "$ref": "#/components/examples/ForbiddenExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Invalid ID supplied",
            "headers": {
              "requestId": {
                "description": "The request id, either internally generated or taken from the request header.",
                "style": "simple",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseBody"
                }
              }
            }
          },
          "409": {
            "description": "Duplicate item",
            "headers": {
              "requestId": {
                "description": "The request id, either internally generated or taken from the request header.",
                "style": "simple",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseBody"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "headers": {
              "requestId": {
                "description": "The request id, either internally generated or taken from the request header.",
                "style": "simple",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseBody"
                },
                "examples": {
                  "InternalServerErrorExample": {
                    "$ref": "#/components/examples/InternalServerErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/careplan/note/update": {
      "put": {
        "tags": [
          "care-plan-controller"
        ],
        "summary": "Updates the case notes in a case for a patient as read.",
        "description": "Updates the case notes in a case for a patient as read.",
        "operationId": "updateNotesAsRead",
        "parameters": [
          {
            "name": "api-version",
            "in": "header",
            "description": "api version",
            "required": false,
            "schema": {
              "type": "string",
              "default": "1"
            }
          },
          {
            "name": "caseId",
            "in": "query",
            "description": "The unique identifier of the case.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/uuid"
            }
          },
          {
            "name": "patientId",
            "in": "query",
            "description": "The unique identifier of the patient.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/uuid",
              "example": "133d9d7b-a731-45b3-a5e8-b7931a2ae64e"
            }
          },
          {
            "name": "requestId",
            "in": "header",
            "description": "The unique identifier of the request.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "requestId": {
                "description": "The request id, either internally generated or taken from the request header.",
                "style": "simple",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatientAndSummaryCase"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "headers": {
              "requestId": {
                "description": "The request id, either internally generated or taken from the request header.",
                "style": "simple",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseBody"
                },
                "examples": {
                  "BadRequestExample": {
                    "$ref": "#/components/examples/BadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "headers": {
              "requestId": {
                "description": "The request id, either internally generated or taken from the request header.",
                "style": "simple",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseBody"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "headers": {
              "requestId": {
                "description": "The request id, either internally generated or taken from the request header.",
                "style": "simple",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseBody"
                },
                "examples": {
                  "ForbiddenExample": {
                    "$ref": "#/components/examples/ForbiddenExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Invalid ID supplied",
            "headers": {
              "requestId": {
                "description": "The request id, either internally generated or taken from the request header.",
                "style": "simple",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseBody"
                }
              }
            }
          },
          "409": {
            "description": "Duplicate item",
            "headers": {
              "requestId": {
                "description": "The request id, either internally generated or taken from the request header.",
                "style": "simple",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseBody"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "headers": {
              "requestId": {
                "description": "The request id, either internally generated or taken from the request header.",
                "style": "simple",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseBody"
                },
                "examples": {
                  "InternalServerErrorExample": {
                    "$ref": "#/components/examples/InternalServerErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/careplan/note/add": {
      "put": {
        "tags": [
          "care-plan-controller"
        ],
        "summary": "Adds note data to the case data for a patient.",
        "description": "Adds note data to the case data for a patient.",
        "operationId": "addNote",
        "parameters": [
          {
            "name": "api-version",
            "in": "header",
            "description": "api version",
            "required": false,
            "schema": {
              "type": "string",
              "default": "1"
            }
          },
          {
            "name": "patientId",
            "in": "query",
            "description": "The unique identifier of the patient.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/uuid",
              "example": "133d9d7b-a731-45b3-a5e8-b7931a2ae64e"
            }
          },
          {
            "name": "requestId",
            "in": "header",
            "description": "The unique identifier of the request.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "requestBody": {
          "description": "The note data to add.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Note"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "requestId": {
                "description": "The request id, either internally generated or taken from the request header.",
                "style": "simple",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatientAndSummaryCase"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "headers": {
              "requestId": {
                "description": "The request id, either internally generated or taken from the request header.",
                "style": "simple",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseBody"
                },
                "examples": {
                  "BadRequestExample": {
                    "$ref": "#/components/examples/BadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "headers": {
              "requestId": {
                "description": "The request id, either internally generated or taken from the request header.",
                "style": "simple",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseBody"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "headers": {
              "requestId": {
                "description": "The request id, either internally generated or taken from the request header.",
                "style": "simple",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseBody"
                },
                "examples": {
                  "ForbiddenExample": {
                    "$ref": "#/components/examples/ForbiddenExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Invalid ID supplied",
            "headers": {
              "requestId": {
                "description": "The request id, either internally generated or taken from the request header.",
                "style": "simple",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseBody"
                }
              }
            }
          },
          "409": {
            "description": "Duplicate item",
            "headers": {
              "requestId": {
                "description": "The request id, either internally generated or taken from the request header.",
                "style": "simple",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseBody"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "headers": {
              "requestId": {
                "description": "The request id, either internally generated or taken from the request header.",
                "style": "simple",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseBody"
                },
                "examples": {
                  "InternalServerErrorExample": {
                    "$ref": "#/components/examples/InternalServerErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/careplan/consultation": {
      "put": {
        "tags": [
          "care-plan-controller"
        ],
        "summary": "Adds or updates consultation data, most recent visual acuity of eyes and eyeAssessment data for a given Patient.",
        "description": "Adds or updates consultation data, most recent visual acuity of eyes and eyeAssessment data for a given Patient.",
        "operationId": "updateConsultationEyeAssessmentAndMostRecentVisualAcuities",
        "parameters": [
          {
            "name": "api-version",
            "in": "header",
            "description": "api version",
            "required": false,
            "schema": {
              "type": "string",
              "default": "1"
            }
          },
          {
            "name": "caseId",
            "in": "query",
            "description": "The unique identifier of the case.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/uuid"
            }
          },
          {
            "name": "patientId",
            "in": "query",
            "description": "The unique identifier of the patient.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/uuid",
              "example": "133d9d7b-a731-45b3-a5e8-b7931a2ae64e"
            }
          },
          {
            "name": "requestId",
            "in": "header",
            "description": "The unique identifier of the request.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "requestBody": {
          "description": "The consultation, most recent visual acuity of eyes and eye assessment data to add.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConsultationEyeAssessmentAndVisualAcuitiesObjects"
              },
              "examples": {
                "UpdateConsultationEyeAssessmentAndMostRecentVisualAcuitiesRequest": {
                  "$ref": "#/components/examples/UpdateConsultationEyeAssessmentAndMostRecentVisualAcuitiesRequest"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "requestId": {
                "description": "The request id, either internally generated or taken from the request header.",
                "style": "simple",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatientAndSummaryCase"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "headers": {
              "requestId": {
                "description": "The request id, either internally generated or taken from the request header.",
                "style": "simple",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseBody"
                },
                "examples": {
                  "BadRequestExample": {
                    "$ref": "#/components/examples/BadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "headers": {
              "requestId": {
                "description": "The request id, either internally generated or taken from the request header.",
                "style": "simple",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseBody"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "headers": {
              "requestId": {
                "description": "The request id, either internally generated or taken from the request header.",
                "style": "simple",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseBody"
                },
                "examples": {
                  "ForbiddenExample": {
                    "$ref": "#/components/examples/ForbiddenExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Invalid ID supplied",
            "headers": {
              "requestId": {
                "description": "The request id, either internally generated or taken from the request header.",
                "style": "simple",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseBody"
                }
              }
            }
          },
          "409": {
            "description": "Duplicate item",
            "headers": {
              "requestId": {
                "description": "The request id, either internally generated or taken from the request header.",
                "style": "simple",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseBody"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "headers": {
              "requestId": {
                "description": "The request id, either internally generated or taken from the request header.",
                "style": "simple",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseBody"
                },
                "examples": {
                  "InternalServerErrorExample": {
                    "$ref": "#/components/examples/InternalServerErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/careplan/completeCase": {
      "put": {
        "tags": [
          "care-plan-controller"
        ],
        "summary": "Updates the case status for a patient as complete.",
        "description": "Updates the case status for a patient as complete.",
        "operationId": "updateCaseAsComplete",
        "parameters": [
          {
            "name": "api-version",
            "in": "header",
            "description": "api version",
            "required": false,
            "schema": {
              "type": "string",
              "default": "1"
            }
          },
          {
            "name": "caseId",
            "in": "query",
            "description": "The unique identifier of the case.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/uuid"
            }
          },
          {
            "name": "patientId",
            "in": "query",
            "description": "The unique identifier of the patient.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/uuid",
              "example": "133d9d7b-a731-45b3-a5e8-b7931a2ae64e"
            }
          },
          {
            "name": "requestId",
            "in": "header",
            "description": "The unique identifier of the request.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "requestId": {
                "description": "The request id, either internally generated or taken from the request header.",
                "style": "simple",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatientAndSummaryCase"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "headers": {
              "requestId": {
                "description": "The request id, either internally generated or taken from the request header.",
                "style": "simple",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseBody"
                },
                "examples": {
                  "BadRequestExample": {
                    "$ref": "#/components/examples/BadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "headers": {
              "requestId": {
                "description": "The request id, either internally generated or taken from the request header.",
                "style": "simple",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseBody"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "headers": {
              "requestId": {
                "description": "The request id, either internally generated or taken from the request header.",
                "style": "simple",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseBody"
                },
                "examples": {
                  "ForbiddenExample": {
                    "$ref": "#/components/examples/ForbiddenExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Invalid ID supplied",
            "headers": {
              "requestId": {
                "description": "The request id, either internally generated or taken from the request header.",
                "style": "simple",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseBody"
                }
              }
            }
          },
          "409": {
            "description": "Duplicate item",
            "headers": {
              "requestId": {
                "description": "The request id, either internally generated or taken from the request header.",
                "style": "simple",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseBody"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "headers": {
              "requestId": {
                "description": "The request id, either internally generated or taken from the request header.",
                "style": "simple",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseBody"
                },
                "examples": {
                  "InternalServerErrorExample": {
                    "$ref": "#/components/examples/InternalServerErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/careplan/approvedSurgery": {
      "get": {
        "tags": [
          "care-plan-controller"
        ],
        "summary": "Gets Patients with active Surgical Plan list.",
        "description": "Gets Patients with active Surgical Plan list.",
        "operationId": "getPatientsWithActiveSurgicalPlan",
        "parameters": [
          {
            "name": "api-version",
            "in": "header",
            "description": "api version",
            "required": false,
            "schema": {
              "type": "string",
              "default": "1"
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "description": "The string start date is the start date on or  after which the surgeries are scheduled.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2020-01-21"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "The string end date is the end  date on or before  which the surgeries are scheduled.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2020-12-21"
            }
          },
          {
            "name": "hasReferenceImage",
            "in": "query",
            "description": "If the result should include only patients their active surgeries only when the surgical plan that have a reference image .The format true | false. The default value is true",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "requestId",
            "in": "header",
            "description": "request identifier",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "requestId": {
                "description": "The request id, either internally generated or taken from the request header.",
                "style": "simple",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatientsAndActiveSurgeryList"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "headers": {
              "requestId": {
                "description": "The request id, either internally generated or taken from the request header.",
                "style": "simple",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseBody"
                },
                "examples": {
                  "BadRequestExample": {
                    "$ref": "#/components/examples/BadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "headers": {
              "requestId": {
                "description": "The request id, either internally generated or taken from the request header.",
                "style": "simple",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseBody"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "headers": {
              "requestId": {
                "description": "The request id, either internally generated or taken from the request header.",
                "style": "simple",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseBody"
                },
                "examples": {
                  "ForbiddenExample": {
                    "$ref": "#/components/examples/ForbiddenExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Invalid ID supplied",
            "headers": {
              "requestId": {
                "description": "The request id, either internally generated or taken from the request header.",
                "style": "simple",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseBody"
                }
              }
            }
          },
          "409": {
            "description": "Duplicate item",
            "headers": {
              "requestId": {
                "description": "The request id, either internally generated or taken from the request header.",
                "style": "simple",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseBody"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "headers": {
              "requestId": {
                "description": "The request id, either internally generated or taken from the request header.",
                "style": "simple",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseBody"
                },
                "examples": {
                  "InternalServerErrorExample": {
                    "$ref": "#/components/examples/InternalServerErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/careplan/case": {
      "delete": {
        "tags": [
          "care-plan-controller"
        ],
        "summary": "Deletes the case data for a patient.",
        "description": "Deletes the case data for a patient.",
        "operationId": "deleteCase",
        "parameters": [
          {
            "name": "api-version",
            "in": "header",
            "description": "api version",
            "required": false,
            "schema": {
              "type": "string",
              "default": "1"
            }
          },
          {
            "name": "caseId",
            "in": "query",
            "description": "The unique identifier of the case.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/uuid"
            }
          },
          {
            "name": "patientId",
            "in": "query",
            "description": "The unique identifier of the patient.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/uuid",
              "example": "133d9d7b-a731-45b3-a5e8-b7931a2ae64e"
            }
          },
          {
            "name": "requestId",
            "in": "header",
            "description": "The unique identifier of the request.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "requestId": {
                "description": "The request id, either internally generated or taken from the request header.",
                "style": "simple",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatientAndSummaryCase"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "headers": {
              "requestId": {
                "description": "The request id, either internally generated or taken from the request header.",
                "style": "simple",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseBody"
                },
                "examples": {
                  "BadRequestExample": {
                    "$ref": "#/components/examples/BadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "headers": {
              "requestId": {
                "description": "The request id, either internally generated or taken from the request header.",
                "style": "simple",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseBody"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "headers": {
              "requestId": {
                "description": "The request id, either internally generated or taken from the request header.",
                "style": "simple",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseBody"
                },
                "examples": {
                  "ForbiddenExample": {
                    "$ref": "#/components/examples/ForbiddenExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Invalid ID supplied",
            "headers": {
              "requestId": {
                "description": "The request id, either internally generated or taken from the request header.",
                "style": "simple",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseBody"
                }
              }
            }
          },
          "409": {
            "description": "Duplicate item",
            "headers": {
              "requestId": {
                "description": "The request id, either internally generated or taken from the request header.",
                "style": "simple",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseBody"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "headers": {
              "requestId": {
                "description": "The request id, either internally generated or taken from the request header.",
                "style": "simple",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseBody"
                },
                "examples": {
                  "InternalServerErrorExample": {
                    "$ref": "#/components/examples/InternalServerErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "uuid": {
        "type": "string",
        "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
        "minLength": 36,
        "maxLength": 36
      },
      "ExceptionResponseBody": {
        "type": "object",
        "properties": {
          "messages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/messages"
            }
          },
          "requestId": {
            "type": "string",
            "description": "The request id associated with the transaction being processed."
          }
        }
      },
      "messages": {
        "type": "object",
        "properties": {
          "messageTranslationId": {
            "type": "string",
            "description": "The identifier for the error message translation."
          },
          "messageParameters": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "description": "The map of message parameters."
            },
            "description": "The map of message parameters."
          }
        },
        "description": "The list of exception messages."
      },
      "Biometry": {
        "type": "object",
        "properties": {
          "accuracy": {
            "type": "string"
          },
          "measurementMode": {
            "type": "string"
          },
          "source": {
            "type": "string"
          },
          "sourceId": {
            "type": "string"
          },
          "sourceVersion": {
            "type": "string"
          },
          "importStatus": {
            "type": "string"
          },
          "acd": {
            "type": "string"
          },
          "al": {
            "type": "string"
          },
          "lt": {
            "type": "string"
          },
          "wtw": {
            "type": "string"
          },
          "acdStd": {
            "type": "string"
          },
          "alStd": {
            "type": "string"
          },
          "ltStd": {
            "type": "string"
          },
          "wtwStd": {
            "type": "string"
          },
          "biometries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Biometry"
            }
          },
          "index": {
            "type": "string"
          },
          "coMeasurementIndex": {
            "type": "string"
          },
          "importedDataNameList": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "isDataUnTrackImported": {
            "type": "boolean"
          },
          "isTrueAl": {
            "type": "boolean"
          },
          "imagePupil": {
            "type": "string"
          },
          "imagePx": {
            "type": "string"
          },
          "imagePy": {
            "type": "string"
          },
          "cct": {
            "type": "string"
          },
          "aqueousDepth": {
            "type": "string"
          },
          "cctStd": {
            "type": "string"
          },
          "response": {
            "$ref": "#/components/schemas/ExceptionResponseBody"
          },
          "caseId": {
            "description": "The case id (CarePlan/guid).",
            "$ref": "#/components/schemas/uuid",
          },
          "eye": {
            "type": "string",
            "description": "The eye."
          },
          "fromGuid": {
            "$ref": "#/components/schemas/uuid",
            "description": "The guid the resource was created from."
          },
          "guid": {
            "$ref": "#/components/schemas/uuid",
            "description": "The guid."
          },
          "lastUpdated": {
            "type": "string",
            "description": "The time the resource was last updated."
          },
          "parentMeasurement": {
            "$ref": "#/components/schemas/uuid",
            "description": "The parent measurement (Observation/guid)."
          },
          "patientReference": {
            "$ref": "#/components/schemas/uuid",
            "description": "The patient reference (Patient/guid)."
          },
          "patientVersion": {
            "type": "string",
            "description": "The version id of the Patient resource to ensure updated data is not overridden."
          },
          "status": {
            "type": "string",
            "description": "The status of the Observation, required by FHIR and always set to final by default."
          },
          "technician": {
            "type": "string",
            "description": "The technician name."
          },
          "technicianReference": {
            "$ref": "#/components/schemas/uuid",
            "description": "The technician reference (Practitioner/guid)."
          },
          "timeStamp": {
            "type": "string",
            "description": "The time stamp when the Observation was created or last updated."
          },
          "type": {
            "type": "string",
            "description": "The code representing the type of Observation."
          }
        }
      },
      "Case": {
        "type": "object",
        "properties": {
          "author": {
            "type": "string",
            "description": "The reference to the Practitioner in CDR who initiated the case."
          },
          "carePlanResourceStatus": {
            "type": "string",
            "description": "The status of the actual case (active, cancelled, completed). This reflects what would have been the CarePlan.status value in a CDR resource."
          },
          "careTeamReferences": {
            "minItems": 0,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "careTeams": {
            "minItems": 0,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/careTeams"
            }
          },
          "caseName": {
            "type": "string",
            "description": "The name of the case."
          },
          "completedDate": {
            "type": "string",
            "description": "The date that the case was marked completed."
          },
          "excludeFromOptimizations": {
            "type": "boolean",
            "description": "The exclude from optimizations value for the case flag."
          },
          "moreSurgicalPlans": {
            "type": "string",
            "description": "The number of surgical plans not displayed in the patient list."
          },
          "notes": {
            "minItems": 0,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/notes"
            }
          },
          "procedureRequests": {
            "minItems": 0,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/procedureRequests"
            }
          },
          "status": {
            "type": "string",
            "description": "The status of the case stages."
          },
          "summaryCaseReference": {
            "type": "string",
            "description": "The summary case reference needed for reporting."
          },
          "surgeonName": {
            "type": "string",
            "description": "The name of the surgeon assigned to the case, retrieved from the Person resource."
          },
          "surgeonReference": {
            "type": "string",
            "description": "The Practitioner reference of the surgeon assigned to the case."
          },
          "surgeryDate": {
            "type": "string",
            "description": "The surgery date."
          },
          "surgeryLocation": {
            "type": "string",
            "description": "The surgery location."
          },
          "surgicalPlans": {
            "minItems": 0,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/surgicalPlans"
            }
          },
          "surgicalPlanGuids": {
            "minItems": 0,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "timeOutCompletedDateTime": {
            "type": "string",
            "description": "The time out completed date time."
          },
          "defaultPlanningMeasurementOD": {
            "$ref": "#/components/schemas/defaultPlanningMeasurementOD"
          },
          "defaultPlanningMeasurementOS": {
            "$ref": "#/components/schemas/defaultPlanningMeasurementOS"
          },
          "additionalProfileDetails": {
            "$ref": "#/components/schemas/additionalProfileDetails"
          },
          "consultation": {
            "type": "object",
            "description": "The object, defined and managed by the front end, that contains the consultation for a patient."
          },
          "eye": {
            "type": "string",
            "description": "The eye."
          },
          "eyeAssessment": {
            "type": "object",
            "description": "The object, defined and managed by the front end, that contains the eye assessment for a patient within a case."
          },
          "guid": {
            "$ref": "#/components/schemas/uuid",
            "description": "The guid."
          },
          "lastUpdated": {
            "type": "string",
            "description": "The time stamp indicating when the object was last updated."
          },
          "measurementMasterSet": {
            "$ref": "#/components/schemas/measurementMasterSet"
          },
          "surgeryType": {
            "type": "string",
            "description": "The surgery type of the case."
          },
          "tags": {
            "minItems": 0,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "Centration": {
        "type": "object",
        "properties": {
          "centerType": {
            "type": "string",
            "description": "The type of center.",
            "enum": [
              "DilatedPupil",
              "Limbus",
              "UndilatedPupil",
              "Unknown"
            ]
          },
          "centerX": {
            "type": "string",
            "description": "The center x-position."
          },
          "centerY": {
            "type": "string",
            "description": "The center y-position."
          },
          "centerUnits": {
            "type": "string",
            "description": "The center position units, mm | pixels.",
            "enum": [
              "mm",
              "pixels"
            ]
          },
          "decentrationX": {
            "type": "string",
            "description": "The lens optic center x-offset from cutout geometric center, in units of millimeters."
          },
          "decentrationY": {
            "type": "string",
            "description": "The lens optic center y-offset from cutout geometric center, in units of millimeters."
          },
          "imageId": {
            "type": "string",
            "description": "The unique identifier of the associated image."
          }
        }
      },
      "ElevenBoxEntry": {
        "type": "object",
        "properties": {
          "lensName": {
            "type": "string"
          },
          "entryIndex": {
            "type": "string"
          },
          "toricity": {
            "type": "string"
          },
          "iolSeq": {
            "type": "string"
          },
          "iolSeqUnits": {
            "type": "string"
          },
          "predictedSph": {
            "type": "string"
          },
          "predictedSphUnits": {
            "type": "string"
          },
          "predictedCyl": {
            "type": "string"
          },
          "predictedCylUnits": {
            "type": "string"
          },
          "predictedAxis": {
            "type": "string"
          },
          "axisFlipFlag": {
            "type": "boolean"
          },
          "predictedSia": {
            "type": "string"
          },
          "predictedSiaUnits": {
            "type": "string"
          },
          "postSiaK1": {
            "type": "string"
          },
          "postSiaK1Units": {
            "type": "string"
          },
          "postSiaK2": {
            "type": "string"
          },
          "postSiaK2Units": {
            "type": "string"
          },
          "postSiaSteep": {
            "type": "string"
          },
          "postSiaCyl": {
            "type": "string"
          },
          "postOpK1": {
            "type": "string"
          },
          "postOpK1Units": {
            "type": "string"
          },
          "postOpK2": {
            "type": "string"
          },
          "postOpK2Units": {
            "type": "string"
          },
          "postOpSteep": {
            "type": "string"
          },
          "postOpCyl": {
            "type": "string"
          },
          "cylPower": {
            "type": "string"
          },
          "elevenBoxSetsReference": {
            "type": "string"
          },
          "arc1Width": {
            "type": "string"
          },
          "arc1Position": {
            "type": "string"
          },
          "arc2Width": {
            "type": "string"
          },
          "arc2Position": {
            "type": "string"
          },
          "response": {
            "$ref": "#/components/schemas/ExceptionResponseBody"
          },
          "caseId": {
            "$ref": "#/components/schemas/uuid",
            "description": "The case id (CarePlan/guid)."
          },
          "eye": {
            "type": "string",
            "description": "The eye."
          },
          "fromGuid": {
            "$ref": "#/components/schemas/uuid",
            "description": "The guid the resource was created from."
          },
          "guid": {
            "$ref": "#/components/schemas/uuid",
            "description": "The guid."
          },
          "lastUpdated": {
            "type": "string",
            "description": "The time the resource was last updated."
          },
          "parentMeasurement": {
            "$ref": "#/components/schemas/uuid",
            "description": "The parent measurement (Observation/guid)."
          },
          "patientReference": {
            "$ref": "#/components/schemas/uuid",
            "description": "The patient reference (Patient/guid)."
          },
          "patientVersion": {
            "type": "string",
            "description": "The version id of the Patient resource to ensure updated data is not overridden."
          },
          "status": {
            "type": "string",
            "description": "The status of the Observation, required by FHIR and always set to final by default."
          },
          "technician": {
            "type": "string",
            "description": "The technician name."
          },
          "technicianReference": {
            "$ref": "#/components/schemas/uuid",
            "description": "The technician reference (Practitioner/guid)."
          },
          "timeStamp": {
            "type": "string",
            "description": "The time stamp when the Observation was created or last updated."
          },
          "type": {
            "type": "string",
            "description": "The code representing the type of Observation."
          }
        }
      },
      "ElevenBoxSet": {
        "type": "object",
        "properties": {
          "setIndex": {
            "type": "string"
          },
          "entrySelected": {
            "type": "string"
          },
          "lensType": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "description": "The status of the Observation, required by FHIR and always set to final by default."
          },
          "elevenBoxEntries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ElevenBoxEntry"
            }
          },
          "preOpsReference": {
            "type": "string"
          },
          "response": {
            "$ref": "#/components/schemas/ExceptionResponseBody"
          },
          "caseId": {
            "$ref": "#/components/schemas/uuid",
            "description": "The case id (CarePlan/guid)."
          },
          "eye": {
            "type": "string",
            "description": "The eye."
          },
          "fromGuid": {
            "$ref": "#/components/schemas/uuid",
            "description": "The guid the resource was created from."
          },
          "guid": {
            "$ref": "#/components/schemas/uuid",
            "description": "The guid."
          },
          "lastUpdated": {
            "type": "string",
            "description": "The time the resource was last updated."
          },
          "parentMeasurement": {
            "$ref": "#/components/schemas/uuid",
            "description": "The parent measurement (Observation/guid)."
          },
          "patientReference": {
            "$ref": "#/components/schemas/uuid",
            "description": "The patient reference (Patient/guid)."
          },
          "patientVersion": {
            "type": "string",
            "description": "The version id of the Patient resource to ensure updated data is not overridden."
          },
          "technician": {
            "type": "string",
            "description": "The technician name."
          },
          "technicianReference": {
            "$ref": "#/components/schemas/uuid",
            "description": "The technician reference (Practitioner/guid)."
          },
          "timeStamp": {
            "type": "string",
            "description": "The time stamp when the Observation was created or last updated."
          },
          "type": {
            "type": "string",
            "description": "The code representing the type of Observation."
          }
        }
      },
      "Image": {
        "type": "object",
        "properties": {
          "clonedPatientId": {
            "type": "string"
          },
          "imageContentType": {
            "type": "string"
          },
          "imageId": {
            "type": "string"
          },
          "imageIndex": {
            "type": "string"
          },
          "imageLimbusCenterX": {
            "type": "string"
          },
          "imageLimbusCenterY": {
            "type": "string"
          },
          "imageLimbusRadiusMajor": {
            "type": "string"
          },
          "imageLimbusRadiusMinor": {
            "type": "string"
          },
          "imageName": {
            "type": "string"
          },
          "imagePixelsPerMillimeter": {
            "type": "string"
          },
          "imagePresignedUri": {
            "type": "string"
          },
          "imagePupilCenterX": {
            "type": "string"
          },
          "imagePupilCenterY": {
            "type": "string"
          },
          "imagePupilRadiusMajor": {
            "type": "string"
          },
          "imagePupilRadiusMinor": {
            "type": "string"
          },
          "imageRelativePath": {
            "type": "string"
          },
          "imageSource": {
            "type": "string"
          },
          "importStatus": {
            "type": "string"
          },
          "source": {
            "type": "string"
          },
          "imageValue": {
            "type": "string"
          },
          "imageSizeUnits": {
            "type": "string"
          },
          "imageSizeWidth": {
            "type": "string"
          },
          "imageSizeHeight": {
            "type": "string"
          },
          "imageScaleUnits": {
            "type": "string"
          },
          "imageScaleValueX": {
            "type": "string"
          },
          "imageScaleValueY": {
            "type": "string"
          },
          "imageRotation": {
            "type": "string"
          },
          "imageRotationUnits": {
            "type": "string"
          },
          "imageColorSpace": {
            "type": "string"
          },
          "imageBayerPattern": {
            "type": "string"
          },
          "imageTypeName": {
            "type": "string"
          },
          "imageDataId": {
            "type": "string"
          },
          "imageBufferSize": {
            "type": "string"
          },
          "imageCompression": {
            "type": "string"
          },
          "imagePurkinjePositionX": {
            "type": "string"
          },
          "imagePurkinjePositionY": {
            "type": "string"
          },
          "imagePurkinjeQualityValue": {
            "type": "string"
          },
          "response": {
            "$ref": "#/components/schemas/ExceptionResponseBody"
          },
          "caseId": {
            "$ref": "#/components/schemas/uuid",
            "description": "The case id (CarePlan/guid)."
          },
          "eye": {
            "type": "string",
            "description": "The eye."
          },
          "fromGuid": {
            "$ref": "#/components/schemas/uuid",
            "description": "The guid the resource was created from."
          },
          "guid": {
            "$ref": "#/components/schemas/uuid",
            "description": "The guid."
          },
          "lastUpdated": {
            "type": "string",
            "description": "The time the resource was last updated."
          },
          "parentMeasurement": {
            "$ref": "#/components/schemas/uuid",
            "description": "The parent measurement (Observation/guid)."
          },
          "patientReference": {
            "$ref": "#/components/schemas/uuid",
            "description": "The patient reference (Patient/guid)."
          },
          "patientVersion": {
            "type": "string",
            "description": "The version id of the Patient resource to ensure updated data is not overridden."
          },
          "status": {
            "type": "string",
            "description": "The status of the Observation, required by FHIR and always set to final by default."
          },
          "technician": {
            "type": "string",
            "description": "The technician name."
          },
          "technicianReference": {
            "$ref": "#/components/schemas/uuid",
            "description": "The technician reference (Practitioner/guid)."
          },
          "timeStamp": {
            "type": "string",
            "description": "The time stamp when the Observation was created or last updated."
          },
          "type": {
            "type": "string",
            "description": "The code representing the type of Observation."
          }
        }
      },
      "ImageSet": {
        "type": "object",
        "properties": {
          "images": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Image"
            }
          },
          "selectedImage": {
            "type": "string"
          },
          "response": {
            "$ref": "#/components/schemas/ExceptionResponseBody"
          },
          "caseId": {
            "$ref": "#/components/schemas/uuid",
            "description": "The case id (CarePlan/guid)."
          },
          "eye": {
            "type": "string",
            "description": "The eye."
          },
          "fromGuid": {
            "$ref": "#/components/schemas/uuid",
            "description": "The guid the resource was created from."
          },
          "guid": {
            "$ref": "#/components/schemas/uuid",
            "description": "The guid."
          },
          "lastUpdated": {
            "type": "string",
            "description": "The time the resource was last updated."
          },
          "parentMeasurement": {
            "$ref": "#/components/schemas/uuid",
            "description": "The parent measurement (Observation/guid)."
          },
          "patientReference": {
            "$ref": "#/components/schemas/uuid",
            "description": "The patient reference (Patient/guid)."
          },
          "patientVersion": {
            "type": "string",
            "description": "The version id of the Patient resource to ensure updated data is not overridden."
          },
          "status": {
            "type": "string",
            "description": "The status of the Observation, required by FHIR and always set to final by default."
          },
          "technician": {
            "type": "string",
            "description": "The technician name."
          },
          "technicianReference": {
            "$ref": "#/components/schemas/uuid",
            "description": "The technician reference (Practitioner/guid)."
          },
          "timeStamp": {
            "type": "string",
            "description": "The time stamp when the Observation was created or last updated."
          },
          "type": {
            "type": "string",
            "description": "The code representing the type of Observation."
          }
        }
      },
      "IncisionsAndArcs": {
        "type": "object",
        "properties": {
          "arculateIncisionMethod": {
            "type": "string"
          },
          "createdBySelection": {
            "type": "string"
          },
          "depthPercent": {
            "type": "string"
          },
          "depth": {
            "type": "string"
          },
          "depthUnits": {
            "type": "string"
          },
          "pachymetry": {
            "type": "string"
          },
          "diameterMm": {
            "type": "string"
          },
          "incision2": {
            "type": "string"
          },
          "incision2Degree": {
            "type": "string"
          },
          "incision3": {
            "type": "string"
          },
          "incision3Degree": {
            "type": "string"
          },
          "nomogramSelection": {
            "type": "string"
          },
          "primaryIncision": {
            "type": "string"
          },
          "primaryIncisionDegree": {
            "type": "string"
          },
          "opticalZone": {
            "type": "string"
          },
          "laserFactor": {
            "type": "string"
          },
          "response": {
            "$ref": "#/components/schemas/ExceptionResponseBody"
          },
          "caseId": {
            "$ref": "#/components/schemas/uuid",
            "description": "The case id (CarePlan/guid)."
          },
          "eye": {
            "type": "string",
            "description": "The eye."
          },
          "fromGuid": {
            "$ref": "#/components/schemas/uuid",
            "description": "The guid the resource was created from."
          },
          "guid": {
            "$ref": "#/components/schemas/uuid",
            "description": "The guid."
          },
          "lastUpdated": {
            "type": "string",
            "description": "The time the resource was last updated."
          },
          "parentMeasurement": {
            "$ref": "#/components/schemas/uuid",
            "description": "The parent measurement (Observation/guid)."
          },
          "patientReference": {
            "$ref": "#/components/schemas/uuid",
            "description": "The patient reference (Patient/guid)."
          },
          "patientVersion": {
            "type": "string",
            "description": "The version id of the Patient resource to ensure updated data is not overridden."
          },
          "status": {
            "type": "string",
            "description": "The status of the Observation, required by FHIR and always set to final by default."
          },
          "technician": {
            "type": "string",
            "description": "The technician name."
          },
          "technicianReference": {
            "$ref": "#/components/schemas/uuid",
            "description": "The technician reference (Practitioner/guid)."
          },
          "timeStamp": {
            "type": "string",
            "description": "The time stamp when the Observation was created or last updated."
          },
          "type": {
            "type": "string",
            "description": "The code representing the type of Observation."
          },
          "arc1AtDegree": {
            "type": "string"
          },
          "arc1Degree": {
            "type": "string"
          },
          "arc2AtDegree": {
            "type": "string"
          },
          "arc2Degree": {
            "type": "string"
          }
        }
      },
      "IntraOp": {
        "type": "object",
        "properties": {
          "oraMeasurements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OraMeasurement"
            }
          },
          "incisionsAndArcs": {
            "$ref": "#/components/schemas/IncisionsAndArcs"
          },
          "surgeryProcedureStatus": {
            "type": "string"
          },
          "implantedLensFormula": {
            "type": "string"
          },
          "implantedLensBrand": {
            "type": "string"
          },
          "implantedLensModel": {
            "type": "string"
          },
          "implantedLensToricity": {
            "type": "string"
          },
          "implantedLensPower": {
            "type": "string"
          },
          "implantedLensImplementationAngle": {
            "type": "string"
          },
          "implantedLensPredictedRefraction": {
            "type": "string"
          },
          "oraImplantedLensFormula": {
            "type": "string"
          },
          "oraImplantedLensBrand": {
            "type": "string"
          },
          "oraImplantedLensModel": {
            "type": "string"
          },
          "oraImplantedLensToricity": {
            "type": "string"
          },
          "oraImplantedLensPower": {
            "type": "string"
          },
          "oraImplantedLensImplementationAngle": {
            "type": "string"
          },
          "oraImplantedLensPredictedRefraction": {
            "type": "string"
          },
          "dmmImplantedLensFormula": {
            "type": "string"
          },
          "dmmImplantedLensBrand": {
            "type": "string"
          },
          "dmmImplantedLensModel": {
            "type": "string"
          },
          "dmmImplantedLensToricity": {
            "type": "string"
          },
          "dmmImplantedLensPower": {
            "type": "string"
          },
          "dmmImplantedLensImplementationAngle": {
            "type": "string"
          },
          "dmmImplantedLensPredictedRefraction": {
            "type": "string"
          },
          "excludeFromOptimizations": {
            "type": "boolean"
          },
          "imageSet": {
            "$ref": "#/components/schemas/ImageSet"
          },
          "surgeryDate": {
            "type": "string"
          },
          "source": {
            "type": "string"
          },
          "plannedLensManufacturer": {
            "type": "string"
          },
          "plannedLensModel": {
            "type": "string"
          },
          "plannedLensPower": {
            "type": "string"
          },
          "plannedLensPredictedRefraction": {
            "type": "string"
          },
          "plannedLensToricity": {
            "type": "string"
          },
          "plannedLensImplementationAngle": {
            "type": "string"
          },
          "plannedLensFormula": {
            "type": "string"
          },
          "postRefractive": {
            "type": "string"
          },
          "targetRefraction": {
            "type": "string"
          },
          "biometry": {
            "$ref": "#/components/schemas/Biometry"
          },
          "keratometry": {
            "$ref": "#/components/schemas/Keratometry"
          },
          "surgeryCode": {
            "type": "string"
          },
          "dhsAscPracticeId": {
            "type": "string"
          },
          "femtoValues": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "phacoParameters": {
            "$ref": "#/components/schemas/PhacoParameters"
          },
          "isFromOra": {
            "type": "boolean"
          },
          "isFromGps": {
            "type": "boolean"
          },
          "response": {
            "$ref": "#/components/schemas/ExceptionResponseBody"
          },
          "caseId": {
            "$ref": "#/components/schemas/uuid",
            "description": "The case id (CarePlan/guid)."
          },
          "eye": {
            "type": "string",
            "description": "The eye."
          },
          "fromGuid": {
            "$ref": "#/components/schemas/uuid",
            "description": "The guid the resource was created from."
          },
          "guid": {
            "$ref": "#/components/schemas/uuid",
            "description": "The guid."
          },
          "lastUpdated": {
            "type": "string",
            "description": "The time the resource was last updated."
          },
          "parentMeasurement": {
            "$ref": "#/components/schemas/uuid",
            "description": "The parent measurement (Observation/guid)."
          },
          "patientReference": {
            "$ref": "#/components/schemas/uuid",
            "description": "The patient reference (Patient/guid)."
          },
          "patientVersion": {
            "type": "string",
            "description": "The version id of the Patient resource to ensure updated data is not overridden."
          },
          "status": {
            "type": "string",
            "description": "The status of the Observation, required by FHIR and always set to final by default."
          },
          "technician": {
            "type": "string",
            "description": "The technician name."
          },
          "technicianReference": {
            "$ref": "#/components/schemas/uuid",
            "description": "The technician reference (Practitioner/guid)."
          },
          "timeStamp": {
            "type": "string",
            "description": "The time stamp when the Observation was created or last updated."
          },
          "type": {
            "type": "string",
            "description": "The code representing the type of Observation."
          },
          "centrations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Centration"
            }
          },
          "lenSx": {
            "$ref": "#/components/schemas/LenSx"
          }
        }
      },
      "IolMeasurement": {
        "type": "object",
        "properties": {
          "axis": {
            "type": "string"
          },
          "acd": {
            "type": "string"
          },
          "response": {
            "$ref": "#/components/schemas/ExceptionResponseBody"
          },
          "caseId": {
            "$ref": "#/components/schemas/uuid",
            "description": "The case id (CarePlan/guid)."
          },
          "eye": {
            "type": "string",
            "description": "The eye."
          },
          "fromGuid": {
            "$ref": "#/components/schemas/uuid",
            "description": "The guid the resource was created from."
          },
          "guid": {
            "$ref": "#/components/schemas/uuid",
            "description": "The guid."
          },
          "lastUpdated": {
            "type": "string",
            "description": "The time the resource was last updated."
          },
          "parentMeasurement": {
            "$ref": "#/components/schemas/uuid",
            "description": "The parent measurement (Observation/guid)."
          },
          "patientReference": {
            "$ref": "#/components/schemas/uuid",
            "description": "The patient reference (Patient/guid)."
          },
          "patientVersion": {
            "type": "string",
            "description": "The version id of the Patient resource to ensure updated data is not overridden."
          },
          "status": {
            "type": "string",
            "description": "The status of the Observation, required by FHIR and always set to final by default."
          },
          "technician": {
            "type": "string",
            "description": "The technician name."
          },
          "technicianReference": {
            "$ref": "#/components/schemas/uuid",
            "description": "The technician reference (Practitioner/guid)."
          },
          "timeStamp": {
            "type": "string",
            "description": "The time stamp when the Observation was created or last updated."
          },
          "type": {
            "type": "string",
            "description": "The code representing the type of Observation."
          }
        }
      },
      "Keratometry": {
        "type": "object",
        "properties": {
          "accuracy": {
            "type": "string"
          },
          "measurementMode": {
            "type": "string"
          },
          "source": {
            "type": "string"
          },
          "sourceId": {
            "type": "string"
          },
          "sourceVersion": {
            "type": "string"
          },
          "importStatus": {
            "type": "string"
          },
          "k1": {
            "type": "string"
          },
          "k2": {
            "type": "string"
          },
          "k1Std": {
            "type": "string"
          },
          "k2Std": {
            "type": "string"
          },
          "kUnits": {
            "type": "string"
          },
          "deviceRefractiveIndex": {
            "type": "string"
          },
          "steep": {
            "type": "string"
          },
          "cyl": {
            "type": "string"
          },
          "steepStd": {
            "type": "string"
          },
          "cylStd": {
            "type": "string"
          },
          "keratometries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Keratometry"
            }
          },
          "index": {
            "type": "string"
          },
          "coMeasurementIndex": {
            "type": "string"
          },
          "axisOnlyMeasurementFlag": {
            "type": "boolean"
          },
          "accuracyTk": {
            "type": "string"
          },
          "importStatusTk": {
            "type": "string"
          },
          "sourceTk": {
            "type": "string"
          },
          "sourceIdTk": {
            "type": "string"
          },
          "sourceVersionTk": {
            "type": "string"
          },
          "k1Tk": {
            "type": "string"
          },
          "k2Tk": {
            "type": "string"
          },
          "k1StdTk": {
            "type": "string"
          },
          "k2StdTk": {
            "type": "string"
          },
          "kUnitsTk": {
            "type": "string"
          },
          "deviceRefractiveIndexTk": {
            "type": "string"
          },
          "steepTk": {
            "type": "string"
          },
          "timeStampTk": {
            "type": "string"
          },
          "technicianTk": {
            "type": "string"
          },
          "cylTk": {
            "type": "string"
          },
          "steepStdTk": {
            "type": "string"
          },
          "cylStdTk": {
            "type": "string"
          },
          "refractiveIndexAqueousHumorTk": {
            "type": "string"
          },
          "refractiveIndexCorneaTk": {
            "type": "string"
          },
          "k1Quality": {
            "type": "string"
          },
          "k2Quality": {
            "type": "string"
          },
          "k1VesselQuality": {
            "type": "string"
          },
          "k2VesselQuality": {
            "type": "string"
          },
          "k1CornealPowerQuality": {
            "type": "string"
          },
          "k2CornealPowerQuality": {
            "type": "string"
          },
          "k1QualityTk": {
            "type": "string"
          },
          "k2QualityTk": {
            "type": "string"
          },
          "k1VesselQualityTk": {
            "type": "string"
          },
          "k2VesselQualityTk": {
            "type": "string"
          },
          "k1CornealPowerQualityTk": {
            "type": "string"
          },
          "k2CornealPowerQualityTk": {
            "type": "string"
          },
          "importedAnteriorKeratometryDataNameList": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "importedPosteriorKeratometryDataNameList": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "isAnteriorKeratometryDataUnTrackImported": {
            "type": "boolean"
          },
          "isPosteriorKeratometryDataUnTrackImported": {
            "type": "boolean"
          },
          "response": {
            "$ref": "#/components/schemas/ExceptionResponseBody"
          },
          "importType": {
            "type": "string"
          },
          "caseId": {
            "$ref": "#/components/schemas/uuid",
            "description": "The case id (CarePlan/guid)."
          },
          "eye": {
            "type": "string",
            "description": "The eye."
          },
          "fromGuid": {
            "$ref": "#/components/schemas/uuid",
            "description": "The guid the resource was created from."
          },
          "guid": {
            "$ref": "#/components/schemas/uuid",
            "description": "The guid."
          },
          "lastUpdated": {
            "type": "string",
            "description": "The time the resource was last updated."
          },
          "parentMeasurement": {
            "$ref": "#/components/schemas/uuid",
            "description": "The parent measurement (Observation/guid)."
          },
          "patientReference": {
            "$ref": "#/components/schemas/uuid",
            "description": "The patient reference (Patient/guid)."
          },
          "patientVersion": {
            "type": "string",
            "description": "The version id of the Patient resource to ensure updated data is not overridden."
          },
          "status": {
            "type": "string",
            "description": "The status of the Observation, required by FHIR and always set to final by default."
          },
          "technician": {
            "type": "string",
            "description": "The technician name."
          },
          "technicianReference": {
            "$ref": "#/components/schemas/uuid",
            "description": "The technician reference (Practitioner/guid)."
          },
          "timeStamp": {
            "type": "string",
            "description": "The time stamp when the Observation was created or last updated."
          },
          "type": {
            "type": "string",
            "description": "The code representing the type of Observation."
          }
        }
      },
      "LenSx": {
        "type": "object",
        "properties": {
          "arcuateIncision": {
            "$ref": "#/components/schemas/arcuateIncision"
          },
          "capsulotomy": {
            "$ref": "#/components/schemas/capsulotomy"
          },
          "lenSxCaseId": {
            "type": "string",
            "description": "The LenSx case identifier."
          },
          "centration": {
            "$ref": "#/components/schemas/centration"
          },
          "centrations": {
            "minItems": 0,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/centrations"
            }
          },
          "cyclorotationAngleDelta": {
            "type": "string",
            "description": "The cyclorotation angle delta, in units of degrees."
          },
          "deviceVersion": {
            "type": "string",
            "description": "The device version."
          },
          "imageSet": {
            "$ref": "#/components/schemas/imageSet"
          },
          "lens": {
            "$ref": "#/components/schemas/lens"
          },
          "plOffsetAngle": {
            "type": "string",
            "description": "The offset angle, in units of degrees."
          },
          "plOffsetMagnitude": {
            "type": "string",
            "description": "The offset magnitude, in units of millimeters."
          },
          "primaryIncision": {
            "$ref": "#/components/schemas/primaryIncision"
          },
          "registration": {
            "$ref": "#/components/schemas/registration"
          },
          "secondaryIncision": {
            "$ref": "#/components/schemas/secondaryIncision"
          },
          "response": {
            "$ref": "#/components/schemas/ExceptionResponseBody"
          },
          "caseId": {
            "$ref": "#/components/schemas/uuid",
            "description": "The case id (CarePlan/guid)."
          },
          "eye": {
            "type": "string",
            "description": "The eye."
          },
          "fromGuid": {
            "$ref": "#/components/schemas/uuid",
            "description": "The guid the resource was created from."
          },
          "guid": {
            "$ref": "#/components/schemas/uuid",
            "description": "The guid."
          },
          "lastUpdated": {
            "type": "string",
            "description": "The time the resource was last updated."
          },
          "parentMeasurement": {
            "$ref": "#/components/schemas/uuid",
            "description": "The parent measurement (Observation/guid)."
          },
          "patientReference": {
            "$ref": "#/components/schemas/uuid",
            "description": "The patient reference (Patient/guid)."
          },
          "patientVersion": {
            "type": "string",
            "description": "The version id of the Patient resource to ensure updated data is not overridden."
          },
          "status": {
            "type": "string",
            "description": "The status of the Observation, required by FHIR and always set to final by default."
          },
          "technician": {
            "type": "string",
            "description": "The technician name."
          },
          "technicianReference": {
            "$ref": "#/components/schemas/uuid",
            "description": "The technician reference (Practitioner/guid)."
          },
          "timeStamp": {
            "type": "string",
            "description": "The time stamp when the Observation was created or last updated."
          },
          "type": {
            "type": "string",
            "description": "The code representing the type of Observation."
          }
        }
      },
      "OraMeasurement": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "measurementType": {
            "type": "string"
          },
          "rotation": {
            "type": "string"
          },
          "sphere": {
            "type": "string"
          },
          "cylinder": {
            "type": "string"
          },
          "axis": {
            "type": "string"
          },
          "chosenPower": {
            "type": "string"
          },
          "predictedRefraction": {
            "type": "string"
          },
          "qualityMeasure": {
            "type": "string"
          },
          "phakicState": {
            "type": "string"
          },
          "forced": {
            "type": "string"
          },
          "imageSet": {
            "$ref": "#/components/schemas/ImageSet"
          },
          "measurementMasterSetReference": {
            "type": "string"
          },
          "suggestedPower": {
            "type": "string"
          },
          "suggestedPredictedRefraction": {
            "type": "string"
          },
          "response": {
            "$ref": "#/components/schemas/ExceptionResponseBody"
          },
          "caseId": {
            "$ref": "#/components/schemas/uuid",
            "description": "The case id (CarePlan/guid)."
          },
          "eye": {
            "type": "string",
            "description": "The eye."
          },
          "fromGuid": {
            "$ref": "#/components/schemas/uuid",
            "description": "The guid the resource was created from."
          },
          "guid": {
            "$ref": "#/components/schemas/uuid",
            "description": "The guid."
          },
          "lastUpdated": {
            "type": "string",
            "description": "The time the resource was last updated."
          },
          "parentMeasurement": {
            "$ref": "#/components/schemas/uuid",
            "description": "The parent measurement (Observation/guid)."
          },
          "patientReference": {
            "$ref": "#/components/schemas/uuid",
            "description": "The patient reference (Patient/guid)."
          },
          "patientVersion": {
            "type": "string",
            "description": "The version id of the Patient resource to ensure updated data is not overridden."
          },
          "status": {
            "type": "string",
            "description": "The status of the Observation, required by FHIR and always set to final by default."
          },
          "technician": {
            "type": "string",
            "description": "The technician name."
          },
          "technicianReference": {
            "$ref": "#/components/schemas/uuid",
            "description": "The technician reference (Practitioner/guid)."
          },
          "timeStamp": {
            "type": "string",
            "description": "The time stamp when the Observation was created or last updated."
          },
          "type": {
            "type": "string",
            "description": "The code representing the type of Observation."
          }
        }
      },
      "PhacoParameters": {
        "type": "object",
        "properties": {
          "averageLongitudinalPower": {
            "$ref": "#/components/schemas/averageLongitudinalPower"
          },
          "averageLongitudinalPowerFP3": {
            "$ref": "#/components/schemas/averageLongitudinalPowerFP3"
          },
          "averageTorsionalAmplitude": {
            "$ref": "#/components/schemas/averageTorsionalAmplitude"
          },
          "averageTorsionalAmplitudeFP3": {
            "$ref": "#/components/schemas/averageTorsionalAmplitudeFP3"
          },
          "cumulativeDissipatedEnergy": {
            "$ref": "#/components/schemas/cumulativeDissipatedEnergy"
          },
          "equivalentAverageTorsionalAmplitudeFP3": {
            "$ref": "#/components/schemas/equivalentAverageTorsionalAmplitudeFP3"
          },
          "equivalentAverageUltrasonicPowerFP3": {
            "$ref": "#/components/schemas/equivalentAverageUltrasonicPowerFP3"
          },
          "estimatedFluidUsage": {
            "$ref": "#/components/schemas/estimatedFluidUsage"
          },
          "sessionId": {
            "type": "string",
            "description": "The session id."
          },
          "totalAspirationTime": {
            "$ref": "#/components/schemas/totalAspirationTime"
          },
          "totalLongitudinalPowerOnTime": {
            "$ref": "#/components/schemas/totalLongitudinalPowerOnTime"
          },
          "totalTorsionalAmplitudeOnTime": {
            "$ref": "#/components/schemas/totalTorsionalAmplitudeOnTime"
          },
          "usTotalTime": {
            "$ref": "#/components/schemas/usTotalTime"
          }
        }
      },
      "PostOp": {
        "type": "object",
        "properties": {
          "daysFromSurgery": {
            "type": "string"
          },
          "patientSatisfaction": {
            "type": "string"
          },
          "postComplications": {
            "type": "string"
          },
          "visualAcuity": {
            "$ref": "#/components/schemas/VisualAcuity"
          },
          "iolMeasurement": {
            "$ref": "#/components/schemas/IolMeasurement"
          },
          "keratometry": {
            "$ref": "#/components/schemas/Keratometry"
          },
          "imageSet": {
            "$ref": "#/components/schemas/ImageSet"
          },
          "measurementMasterSetReference": {
            "type": "string"
          },
          "response": {
            "$ref": "#/components/schemas/ExceptionResponseBody"
          },
          "caseId": {
            "$ref": "#/components/schemas/uuid",
            "description": "The case id (CarePlan/guid)."
            
          },
          "eye": {
            "type": "string",
            "description": "The eye."
          },
          "fromGuid": {
            "$ref": "#/components/schemas/uuid",
            "description": "The guid the resource was created from."
          },
          "guid": {
            "$ref": "#/components/schemas/uuid",
            "description": "The guid."
          },
          "lastUpdated": {
            "type": "string",
            "description": "The time the resource was last updated."
          },
          "parentMeasurement": {
            "$ref": "#/components/schemas/uuid",
            "description": "The parent measurement (Observation/guid)."
          },
          "patientReference": {
            "$ref": "#/components/schemas/uuid",
            "description": "The patient reference (Patient/guid)."
          },
          "patientVersion": {
            "type": "string",
            "description": "The version id of the Patient resource to ensure updated data is not overridden."
          },
          "status": {
            "type": "string",
            "description": "The status of the Observation, required by FHIR and always set to final by default."
          },
          "technician": {
            "type": "string",
            "description": "The technician name."
          },
          "technicianReference": {
            "$ref": "#/components/schemas/uuid",
            "description": "The technician reference (Practitioner/guid)."
          },
          "timeStamp": {
            "type": "string",
            "description": "The time stamp when the Observation was created or last updated."
          },
          "type": {
            "type": "string",
            "description": "The code representing the type of Observation."
          },
          "refraction": {
            "$ref": "#/components/schemas/Refraction"
          },
          "sessionIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "PostOpMeasurementSet": {
        "type": "object",
        "properties": {
          "postOps": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PostOp"
            }
          },
          "response": {
            "$ref": "#/components/schemas/ExceptionResponseBody"
          },
          "caseId": {
            "$ref": "#/components/schemas/uuid",
            "description": "The case id (CarePlan/guid)."
          },
          "eye": {
            "type": "string",
            "description": "The eye."
          },
          "fromGuid": {
            "$ref": "#/components/schemas/uuid",
            "description": "The guid the resource was created from."
          },
          "guid": {
            "$ref": "#/components/schemas/uuid",
            "description": "The guid."
          },
          "lastUpdated": {
            "type": "string",
            "description": "The time the resource was last updated."
          },
          "parentMeasurement": {
            "$ref": "#/components/schemas/uuid",
            "description": "The parent measurement (Observation/guid)."
          },
          "patientReference": {
            "$ref": "#/components/schemas/uuid",
            "description": "The patient reference (Patient/guid)."
          },
          "patientVersion": {
            "type": "string",
            "description": "The version id of the Patient resource to ensure updated data is not overridden."
          },
          "status": {
            "type": "string",
            "description": "The status of the Observation, required by FHIR and always set to final by default."
          },
          "technician": {
            "type": "string",
            "description": "The technician name."
          },
          "technicianReference": {
            "$ref": "#/components/schemas/uuid",
            "description": "The technician reference (Practitioner/guid)."
          },
          "timeStamp": {
            "type": "string",
            "description": "The time stamp when the Observation was created or last updated."
          },
          "type": {
            "type": "string",
            "description": "The code representing the type of Observation."
          }
        }
      },
      "PreOpMeasurementSet": {
        "required": [
          "morePreOps"
        ],
        "type": "object",
        "properties": {
          "morePreOps": {
            "type": "string",
            "description": "The number of remaining pre-operative measurements."
          },
          "preOpExams": {
            "type": "string",
            "description": "The name/value pairs of pre-operative examinations."
          },
          "preOps": {
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/preOps"
            }
          },
          "visualAcuities": {
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/visualAcuities"
            }
          },
          "response": {
            "$ref": "#/components/schemas/ExceptionResponseBody"
          },
          "caseId": {
            "$ref": "#/components/schemas/uuid",
            "description": "The case id (CarePlan/guid)."
          },
          "eye": {
            "type": "string",
            "description": "The eye."
          },
          "fromGuid": {
            "$ref": "#/components/schemas/uuid",
            "description": "The guid the resource was created from."
          },
          "guid": {
            "$ref": "#/components/schemas/uuid",
            "description": "The guid."
          },
          "lastUpdated": {
            "type": "string",
            "description": "The time the resource was last updated."
          },
          "parentMeasurement": {
            "$ref": "#/components/schemas/uuid",
            "description": "The parent measurement (Observation/guid)."
          },
          "patientReference": {
            "$ref": "#/components/schemas/uuid",
            "description": "The patient reference (Patient/guid)."
          },
          "patientVersion": {
            "type": "string",
            "description": "The version id of the Patient resource to ensure updated data is not overridden."
          },
          "status": {
            "type": "string",
            "description": "The status of the Observation, required by FHIR and always set to final by default."
          },
          "technician": {
            "type": "string",
            "description": "The technician name."
          },
          "technicianReference": {
            "$ref": "#/components/schemas/uuid",
            "description": "The technician reference (Practitioner/guid)."
          },
          "timeStamp": {
            "type": "string",
            "description": "The time stamp when the Observation was created or last updated."
          },
          "type": {
            "type": "string",
            "description": "The code representing the type of Observation."
          }
        }
      },
      "Refraction": {
        "type": "object",
        "properties": {
          "axis": {
            "type": "string"
          },
          "cyl": {
            "type": "string"
          },
          "seq": {
            "type": "string"
          },
          "sph": {
            "type": "string"
          },
          "method": {
            "type": "string"
          },
          "intAdd": {
            "type": "string"
          },
          "nearAdd": {
            "type": "string"
          },
          "response": {
            "$ref": "#/components/schemas/ExceptionResponseBody"
          },
          "caseId": {
            "$ref": "#/components/schemas/uuid",
            "description": "The case id (CarePlan/guid)."
          },
          "eye": {
            "type": "string",
            "description": "The eye."
          },
          "fromGuid": {
            "$ref": "#/components/schemas/uuid",
            "description": "The guid the resource was created from."
          },
          "guid": {
            "$ref": "#/components/schemas/uuid",
            "description": "The guid."
          },
          "lastUpdated": {
            "type": "string",
            "description": "The time the resource was last updated."
          },
          "parentMeasurement": {
            "$ref": "#/components/schemas/uuid",
            "description": "The parent measurement (Observation/guid)."
          },
          "patientReference": {
            "$ref": "#/components/schemas/uuid",
            "description": "The patient reference (Patient/guid)."
          },
          "patientVersion": {
            "type": "string",
            "description": "The version id of the Patient resource to ensure updated data is not overridden."
          },
          "status": {
            "type": "string",
            "description": "The status of the Observation, required by FHIR and always set to final by default."
          },
          "technician": {
            "type": "string",
            "description": "The technician name."
          },
          "technicianReference": {
            "$ref": "#/components/schemas/uuid",
            "description": "The technician reference (Practitioner/guid)."
          },
          "timeStamp": {
            "type": "string",
            "description": "The time stamp when the Observation was created or last updated."
          },
          "type": {
            "type": "string",
            "description": "The code representing the type of Observation."
          }
        }
      },
      "SurgeonCredentials": {
        "type": "object",
        "properties": {
          "doctorId": {
            "type": "string",
            "description": "The identifier corresponding to the Doctor.Id in a gps file."
          },
          "doctorOraSurgeonId": {
            "type": "string",
            "description": "The identifier corresponding to the Doctor.oraSurgeonId in a gps file."
          },
          "oraId": {
            "type": "string",
            "description": "The ora id of the surgeon."
          },
          "passwordHash": {
            "type": "string",
            "description": "The password hash."
          },
          "userName": {
            "type": "string",
            "description": "The user name of the surgeon."
          }
        }
      },
      "VisualAcuity": {
        "type": "object",
        "properties": {
          "bcnva": {
            "type": "string"
          },
          "bcva": {
            "type": "string"
          },
          "ucnva": {
            "type": "string"
          },
          "ucva": {
            "type": "string"
          },
          "eye": {
            "type": "string"
          },
          "uciva": {
            "type": "string"
          },
          "bciva": {
            "type": "string"
          },
          "visualAcuityUnit": {
            "type": "string"
          },
          "caseVersion": {
            "type": "string"
          },
          "response": {
            "$ref": "#/components/schemas/ExceptionResponseBody"
          },
          "caseId": {
            "$ref": "#/components/schemas/uuid",
            "description": "The case id (CarePlan/guid)."
          },
          "fromGuid": {
            "$ref": "#/components/schemas/uuid",
            "description": "The guid the resource was created from."
          },
          "guid": {
            "$ref": "#/components/schemas/uuid",
            "description": "The guid."
          },
          "lastUpdated": {
            "type": "string",
            "description": "The time the resource was last updated."
          },
          "parentMeasurement": {
            "$ref": "#/components/schemas/uuid",
            "description": "The parent measurement (Observation/guid)."
          },
          "patientReference": {
            "$ref": "#/components/schemas/uuid",
            "description": "The patient reference (Patient/guid)."
          },
          "patientVersion": {
            "type": "string",
            "description": "The version id of the Patient resource to ensure updated data is not overridden."
          },
          "status": {
            "type": "string",
            "description": "The status of the Observation, required by FHIR and always set to final by default."
          },
          "technician": {
            "type": "string",
            "description": "The technician name."
          },
          "technicianReference": {
            "$ref": "#/components/schemas/uuid",
            "description": "The technician reference (Practitioner/guid)."
          },
          "timeStamp": {
            "type": "string",
            "description": "The time stamp when the Observation was created or last updated."
          },
          "type": {
            "type": "string",
            "description": "The code representing the type of Observation."
          }
        }
      },
      "additionalProfileDetails": {
        "type": "object",
        "properties": {
          "allergyFoods": {
            "type": "string",
            "description": "The foods that patient is allergic to."
          },
          "allergyLatex": {
            "type": "string",
            "description": "The patient has a latex allergy flag."
          },
          "allergyMedications": {
            "type": "string",
            "description": "The medications that patient is allergic to."
          },
          "allergyOther": {
            "type": "string",
            "description": "The other allergies of the patient."
          },
          "comanaged": {
            "type": "string",
            "description": "The patient comanaged flag."
          },
          "consultationStageStatusOd": {
            "description": "The consultation stage status for OD case.",
            "type": "string",
            "enum": [ "Incomplete", "In-Progress", "Complete"],
            "example": "Incomplete"
          },
          "consultationStageStatusOs": {
            "type": "string",
            "description": "The consultation stage status for OS case.",
            "enum": [ "Incomplete", "In-Progress", "Complete"],
            "example": "Incomplete"
          },
          "clonedPatientId": {
            "type": "string",
            "description": "The patient id from which the data was cloned."
          },
          "facilityReference": {
            "type": "string",
            "description": "The reference to the facility that patient is assigned to."
          },
          "insurance": {
            "type": "string",
            "description": "The patient's insurance company."
          },
          "impersonatorEmail": {
            "type": "string",
            "description": "The email of the impersonator user for the patient."
          },
          "impersonatorId": {
            "type": "string",
            "description": "The id of the impersonator user for the patient."
          },
          "isTestPatient": {
            "type": "string",
            "description": "The is the patient created for testing purposes only."
          },
          "language": {
            "type": "string",
            "description": "The language the patient speaks."
          },
          "medicalConditions": {
            "type": "string",
            "description": "The medical conditions that patient has."
          },
          "medicationsOther": {
            "type": "string",
            "description": "The other medications that patient takes."
          },
          "medicationsPrescriptions": {
            "type": "string",
            "description": "The prescriptions that patient takes."
          },
          "medicationsSupplements": {
            "type": "string",
            "description": "The supplements that patient takes."
          },
          "nationality": {
            "type": "string",
            "description": "The name of the patient's country of nationality."
          },
          "occupation": {
            "type": "string",
            "description": "The patient occupation."
          },
          "originallyFrom": {
            "type": "string",
            "description": "The country the patient is originally from."
          },
          "optometristEmail": {
            "type": "string",
            "description": "The optometrist email."
          },
          "optometristId": {
            "type": "string",
            "description": "The optometrist DHS id."
          },
          "photoUrl": {
            "type": "string",
            "description": "The url of the patient photo."
          },
          "preferredLanguage": {
            "type": "string",
            "description": "The preferred language of the patient."
          },
          "prefix": {
            "type": "string",
            "description": "The patient name prefix."
          },
          "preSurgeries": {
            "type": "string",
            "description": "The previous surgeries flag."
          },
          "race": {
            "type": "string",
            "description": "The patient race."
          },
          "referringDoctorName": {
            "type": "string",
            "description": "The name of the referring doctor."
          },
          "referringSiteId": {
            "type": "string",
            "description": "The id of the referring site."
          },
          "referringSiteName": {
            "type": "string",
            "description": "The name of the referring site."
          },
          "selectedSurgeon": {
            "type": "string",
            "description": "The reference to the current surgeon selected for the patient."
          },
          "selectedSurgeonName": {
            "type": "string",
            "description": "The name of the current surgeon selected for the patient."
          },
          "suffix": {
            "type": "string",
            "description": "The patient name suffix."
          },
          "surgeries": {
            "type": "string",
            "description": "The surgeries that patient has had."
          },
          "odActiveCaseStatus": {
            "type": "boolean",
            "description": "The OD active case status."
          },
          "workflowStatusOd": {
            "type": "string",
            "description": "The the OD workflow status for the patient.",
            "example": "Assign surgeon, Add new procedure, Planning, Ready for surgery, Post-Op, Complete"
          },
          "workflowSurgeryDateOd": {
            "type": "string",
            "description": "The OD surgery date based on patient list case."
          },
          "osActiveCaseStatus": {
            "type": "boolean",
            "description": "The OS active case status."
          },
          "workflowStatusOs": {
            "type": "string",
            "description": "The the OS workflow status for the patient.",
            "example": "Assign surgeon, Add new procedure, Planning, Ready for surgery, Post-Op, Complete"
          },
          "workflowSurgeryDateOs": {
            "type": "string",
            "description": "The OS surgery date based on patient list case."
          },
          "organizationName": {
            "type": "string",
            "description": "The practice organization name for the patient."
          },
          "dhsAscPracticeId": {
            "type": "string",
            "description": "The DHS practice id for the patient."
          }
        },
        "description": "The additional details of the Patient profile. Rather than being stored in separate extensions, these will be stored in a single extension with stringified JSON data, the structure of which can be determined by the front end."
      },
      "ageSplit": {
        "type": "object",
        "properties": {
          "min": {
            "type": "string",
            "description": "The age of the patient lower limit for the nomogram columns, in units of years or pre-operative cyl power of the patient lower limit for the nomogram rows, in units of diopters."
          },
          "max": {
            "type": "string",
            "description": "The age of the patient upper limit for the nomogram columns, in units of years or pre-operative cyl power of the patient upper limit for the nomogram rows, in units of diopters."
          },
          "step": {
            "type": "string",
            "description": "The age of the patient step size for the nomogram columns, in units of years or pre-operative cyl power of the patient step size for the nomogram rows, in units of diopters."
          }
        },
        "description": "The patient age splits (columns) for this nomogram."
      },
      "arcLength": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of this CRIConfigurationArcLength (Cylinder Magnitude (CYL) or User Defined)."
          },
          "arcLengthTable": {
            "minItems": 0,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/arcLengthTable"
            }
          },
          "userDefinedValue": {
            "type": "string",
            "description": "The userDefinedValue of this CRIConfigurationArcLength."
          }
        },
        "description": "The arcLength of this CRITemplate."
      },
      "arcLengthTable": {
        "type": "object",
        "properties": {
          "arcLength": {
            "type": "string",
            "description": "The arcLength."
          },
          "high": {
            "type": "string",
            "description": "The high."
          },
          "low": {
            "type": "string",
            "description": "The low."
          }
        },
        "description": "The arcLengthTable of this CRIConfigurationArcLength list."
      },
      "arcuateIncision": {
        "type": "object",
        "properties": {
          "anteriorOverlap": {
            "type": "string",
            "description": "The anterior overlap, in units of micrometers."
          },
          "arcuateIncisionMethod": {
            "type": "string",
            "description": "The method of the arcuate incisions."
          },
          "angles": {
            "minItems": 0,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "positions": {
            "minItems": 0,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "diameter": {
            "type": "string",
            "description": "The diameter of the arcuate incisions, in units of millimeters."
          },
          "energy": {
            "type": "string",
            "description": "The laser pulse energy, in units of microjoules."
          },
          "imageId": {
            "type": "string",
            "description": "The unique identifier of the associated image."
          },
          "layerSeparation": {
            "type": "string",
            "description": "The distance between laser pulse targets along the z-axis, in units of micrometers."
          },
          "oneArc": {
            "type": "string",
            "description": "The single arcuate incision flag, NO | YES.",
            "enum": [
              "NO",
              "YES"
            ]
          },
          "periphCornealThickness": {
            "type": "string",
            "description": "The thickness of the cornea on the periphery, in units of millimeters."
          },
          "postDepth": {
            "type": "string",
            "description": "The depth of the arcuate incisions relative to corneal thickness, in units of percent."
          },
          "sideCutAngle": {
            "type": "string",
            "description": "The flap side cut angle, in units of degrees."
          },
          "spotSeparation": {
            "type": "string",
            "description": "The distance between laser pulse targets in the x-y plane, in units of micrometers."
          },
          "zDelta1": {
            "type": "string",
            "description": "The delta z of arcuate incision 1, in units of degrees."
          },
          "zDelta2": {
            "type": "string",
            "description": "The delta z of arcuate incision 2, in units of degrees."
          }
        },
        "description": "The arcuate incision parameters."
      },
      "arcuates": {
        "type": "object",
        "properties": {
          "nomograms": {
            "minItems": 0,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/nomograms"
            }
          }
        },
        "description": "The arcuates."
      },
      "assessments": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of assessment."
          },
          "result": {
            "type": "string",
            "description": "The result of assessment."
          },
          "timeStamp": {
            "type": "string",
            "description": "The timeStamp of assessment."
          }
        },
        "description": "The assessments list."
      },
      "astigmatismFix": {
        "type": "object",
        "properties": {
          "alignmentRx": {
            "minItems": 0,
            "type": "array",
            "items": {
              "type": "number",
              "format": "double"
            }
          },
          "iolCylPower": {
            "type": "string",
            "description": "The iol cyl power."
          },
          "iolOrientation": {
            "type": "string",
            "description": "The iol orientation."
          },
          "predictedFlatAxis": {
            "type": "string",
            "description": "The predicted flat axis."
          },
          "predictedFlatRadius": {
            "type": "string",
            "description": "The predicted flat radius."
          },
          "predictedSteepAxis": {
            "type": "string",
            "description": "The predicted Steep axis."
          },
          "predictedSteepRadius": {
            "type": "string",
            "description": "The predicted Steep radius."
          },
          "predictedAxis": {
            "type": "string",
            "description": "The predicted axis."
          },
          "predictedCyl": {
            "type": "string",
            "description": "The predicted cyl."
          },
          "predictedSph": {
            "type": "string",
            "description": "The predicted sph."
          },
          "predictedSeq": {
            "type": "string",
            "description": "The predicted seq."
          }
        },
        "description": "The astigmatismFix data."
      },
      "averageLongitudinalPower": {
        "type": "object",
        "properties": {
          "unit": {
            "type": "string",
            "description": "The unit of measurement."
          },
          "value": {
            "type": "string",
            "description": "The value of measurement."
          }
        },
        "description": "The average longitudinal power."
      },
      "averageLongitudinalPowerFP3": {
        "type": "object",
        "properties": {
          "unit": {
            "type": "string",
            "description": "The unit of measurement."
          },
          "value": {
            "type": "string",
            "description": "The value of measurement."
          }
        },
        "description": "The average longitudinal power FP 3."
      },
      "averageTorsionalAmplitude": {
        "type": "object",
        "properties": {
          "unit": {
            "type": "string",
            "description": "The unit of measurement."
          },
          "value": {
            "type": "string",
            "description": "The value of measurement."
          }
        },
        "description": "The average torsional amplitude."
      },
      "averageTorsionalAmplitudeFP3": {
        "type": "object",
        "properties": {
          "unit": {
            "type": "string",
            "description": "The unit of measurement."
          },
          "value": {
            "type": "string",
            "description": "The value of measurement."
          }
        },
        "description": "The average torsional amplitude FP 3."
      },
      "capsulotomy": {
        "type": "object",
        "properties": {
          "anteriorDepth": {
            "type": "string",
            "description": "The anterior depth of the capsule, in units of micrometers."
          },
          "deltaDown": {
            "type": "string",
            "description": "The delta down distance of the capsule, in units of micrometers."
          },
          "deltaUp": {
            "type": "string",
            "description": "The delta up distance of the capsule, in units of micrometers."
          },
          "posteriorDepth": {
            "type": "string",
            "description": "The posterior depth of the capsule, in units of micrometers."
          },
          "diameter": {
            "type": "string",
            "description": "The diameter of the capsule, in units of millimeters."
          },
          "energy": {
            "type": "string",
            "description": "The laser pulse energy, in units of microjoules."
          },
          "imageId": {
            "type": "string",
            "description": "The unique identifier of the associated image."
          },
          "layerSeparation": {
            "type": "string",
            "description": "The distance between laser pulse targets along the z-axis, in units of micrometers."
          },
          "spotSeparation": {
            "type": "string",
            "description": "The distance between laser pulse targets in the x-y plane, in units of micrometers."
          }
        },
        "description": "The capsulotomy parameters."
      },
      "carePlanDetails": {
        "type": "object",
        "properties": {
          "applyHolladayToric": {
            "type": "boolean",
            "description": "The Holladay Toric formula applied flag."
          },
          "eyeAssessment": {
            "$ref": "#/components/schemas/eyeAssessment"
          },
          "femtosecondProcedures": {
            "minItems": 0,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "formula": {
            "type": "string",
            "description": "The formula."
          },
          "implantedLens": {
            "type": "string",
            "description": "The implanted lens."
          },
          "implantedLensAngleCurrent": {
            "type": "string",
            "description": "The current IOL axis."
          },
          "implantedLensAngleOriginal": {
            "type": "string",
            "description": "The original IOL axis."
          },
          "implantedLensBrand": {
            "type": "string",
            "description": "The implanted lens brand."
          },
          "implantedLensCyl": {
            "type": "string",
            "description": "The implanted lens cyl."
          },
          "implantedLensFormula": {
            "type": "string",
            "description": "The implanted lens formula."
          },
          "implantedLensPower": {
            "type": "string",
            "description": "The current IOL SEQ."
          },
          "iolRotationType": {
            "type": "string",
            "description": "The type of iolRotation."
          },
          "lensBrand": {
            "type": "string",
            "description": "The lens brand."
          },
          "lensLocation": {
            "type": "string",
            "description": "The lens location."
          },
          "lensPresence": {
            "type": "string",
            "description": "The lens presence."
          },
          "lensProcedure": {
            "type": "string",
            "description": "The lens procedure."
          },
          "lensState": {
            "type": "string",
            "description": "The lens state."
          },
          "oraLens": {
            "type": "string",
            "description": "The ORA lens."
          },
          "oraLensFormula": {
            "type": "string",
            "description": "The ORA lens formula."
          },
          "oraLensPower": {
            "type": "string",
            "description": "The ORA lens power."
          },
          "oraSurgery": {
            "type": "string",
            "description": "The ORA surgery."
          },
          "planName": {
            "type": "string",
            "description": "The name of plan."
          },
          "plannedLens": {
            "type": "string",
            "description": "The planned lens."
          },
          "plannedLensType": {
            "type": "string",
            "description": "The planned lens type."
          },
          "plannedSEQ": {
            "type": "string",
            "description": "The planned SEQ."
          },
          "postRefraction": {
            "$ref": "#/components/schemas/postRefraction"
          },
          "preRefraction": {
            "$ref": "#/components/schemas/preRefraction"
          },
          "receivedSurgeryEducation": {
            "type": "string",
            "description": "The received surgery education."
          },
          "surgeon": {
            "type": "string",
            "description": "The surgeon."
          },
          "surgeryCode": {
            "type": "string",
            "description": "The surgery code."
          },
          "surgeryDate": {
            "type": "string",
            "description": "The surgery date."
          },
          "targetRefraction": {
            "type": "string",
            "description": "The target refraction."
          },
          "timeoutCompletedDate": {
            "type": "string",
            "description": "The timeout completed date."
          },
          "toricFormula": {
            "type": "string",
            "description": "The toric formula."
          }
        },
        "description": "The additional care plan details needed for the plan, as defined and managed by the front end."
      },
      "careTeams": {
        "type": "object",
        "properties": {
          "caseDetailsReference": {
            "type": "string",
            "description": "The case details reference needed for reporting."
          },
          "guid": {
            "$ref": "#/components/schemas/uuid",
            "description": "The careteam guid."
          },
          "lastUpdated": {
            "type": "string",
            "description": "The time stamp indicating when the object was last updated."
          },
          "practitioners": {
            "minItems": 0,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/practitioners"
            }
          },
          "summaryCaseReference": {
            "type": "string",
            "description": "The summary case reference needed for reporting."
          },
          "versionId": {
            "type": "string",
            "description": "The version id."
          }
        },
        "description": "The CareTeams the Case belongs to list."
      },
      "centration": {
        "type": "object",
        "properties": {
          "centerType": {
            "type": "string",
            "description": "The type of center.",
            "enum": [
              "DilatedPupil",
              "Limbus",
              "UndilatedPupil",
              "Unknown"
            ]
          },
          "centerX": {
            "type": "string",
            "description": "The center x-position."
          },
          "centerY": {
            "type": "string",
            "description": "The center y-position."
          },
          "centerUnits": {
            "type": "string",
            "description": "The center position units.",
            "enum": [
              "mm",
              "pixels"
            ]
          },
          "decentrationX": {
            "type": "string",
            "description": "The lens optic center x-offset from cutout geometric center, in units of millimeters."
          },
          "decentrationY": {
            "type": "string",
            "description": "The lens optic center y-offset from cutout geometric center, in units of millimeters."
          },
          "imageId": {
            "type": "string",
            "description": "The unique identifier of the associated image."
          }
        },
        "description": "The centration parameters which is deprecated field after CP-3247 and it is here for backward compatibility and also support for UI."
      },
      "centrations": {
        "type": "object",
        "properties": {
          "centerType": {
            "type": "string",
            "description": "The type of center.",
            "enum": [
              "DilatedPupil",
              "Limbus",
              "UndilatedPupil",
              "Unknown"
            ]
          },
          "centerX": {
            "type": "string",
            "description": "The center x-position."
          },
          "centerY": {
            "type": "string",
            "description": "The center y-position."
          },
          "centerUnits": {
            "type": "string",
            "description": "The center position units.",
            "enum": [
              "mm",
              "pixels"
            ]
          },
          "decentrationX": {
            "type": "string",
            "description": "The lens optic center x-offset from cutout geometric center, in units of millimeters."
          },
          "decentrationY": {
            "type": "string",
            "description": "The lens optic center y-offset from cutout geometric center, in units of millimeters."
          },
          "imageId": {
            "type": "string",
            "description": "The unique identifier of the associated image."
          }
        },
        "description": "The centration parameters list."
      },
      "constants": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "The value of the constant."
          },
          "type": {
            "type": "string",
            "description": "The type of the constant.",
            "enum": [
              "SRG",
              "PLC",
              "MFG"
            ]
          },
          "formula": {
            "type": "string",
            "description": "The formula associated with the constant.",
            "enum": [
              "Barrett",
              "Haigis",
              "HofferQ",
              "Holladay1",
              "Holladay2",
              "HolladayR",
              "SRKT"
            ]
          },
          "name": {
            "type": "string",
            "description": "The name of the constant.",
            "enum": [
              "A0",
              "A1",
              "A2",
              "ACD",
              "A-Const",
              "LF",
              "SF"
            ]
          },
          "lastUpdatedTimeStamp": {
            "type": "string",
            "description": "The timestamp when the constant was updated (yyyy-MM-ddThh:mm:ss[Z|(+|-)hh:mm])."
          }
        },
        "description": "The lens family constant list."
      },
      "criTemplate": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of this CRITemplate (Refraction or Keratometry or User Defined)."
          },
          "diameter": {
            "$ref": "#/components/schemas/diameter"
          },
          "meridian": {
            "type": "string",
            "description": "The meridian of this CRITemplate (Refraction (REF) or Keratometry (KER) or User Defined (UD))."
          },
          "arcLength": {
            "$ref": "#/components/schemas/arcLength"
          }
        },
        "description": "The CRI template."
      },
      "cumulativeDissipatedEnergy": {
        "type": "object",
        "properties": {
          "unit": {
            "type": "string",
            "description": "The unit of measurement."
          },
          "value": {
            "type": "string",
            "description": "The value of measurement."
          }
        },
        "description": "The cumulative dissipated energy."
      },
      "customLargeIncision": {
        "type": "object",
        "properties": {
          "temporalSia": {
            "type": "string",
            "description": "The temporal SIA."
          },
          "superiorSia": {
            "type": "string",
            "description": "The superior SIA."
          },
          "customSia": {
            "type": "string",
            "description": "The custom SIA."
          },
          "selectedAsDefault": {
            "type": "boolean",
            "description": "The selected as default flag."
          },
          "isCustom": {
            "type": "boolean",
            "description": "The is custom flag."
          },
          "currentSiaStatus": {
            "type": "string",
            "description": "The current SIA status."
          },
          "lastSiaUpdatedStatus": {
            "type": "string",
            "description": "The last SIA updated status."
          }
        },
        "description": "The custom large incision."
      },
      "customMediumIncision": {
        "type": "object",
        "properties": {
          "temporalSia": {
            "type": "string",
            "description": "The temporal SIA."
          },
          "superiorSia": {
            "type": "string",
            "description": "The superior SIA."
          },
          "customSia": {
            "type": "string",
            "description": "The custom SIA."
          },
          "selectedAsDefault": {
            "type": "boolean",
            "description": "The selected as default flag."
          },
          "isCustom": {
            "type": "boolean",
            "description": "The is custom flag."
          },
          "currentSiaStatus": {
            "type": "string",
            "description": "The current SIA status."
          },
          "lastSiaUpdatedStatus": {
            "type": "string",
            "description": "The last SIA updated status."
          }
        },
        "description": "The custom medium incision."
      },
      "customSmallIncision": {
        "type": "object",
        "properties": {
          "temporalSia": {
            "type": "string",
            "description": "The temporal SIA."
          },
          "superiorSia": {
            "type": "string",
            "description": "The superior SIA."
          },
          "customSia": {
            "type": "string",
            "description": "The custom SIA."
          },
          "selectedAsDefault": {
            "type": "boolean",
            "description": "The selected as default flag."
          },
          "isCustom": {
            "type": "boolean",
            "description": "The is custom flag."
          },
          "currentSiaStatus": {
            "type": "string",
            "description": "The current SIA status."
          },
          "lastSiaUpdatedStatus": {
            "type": "string",
            "description": "The last SIA updated status."
          }
        },
        "description": "The custom small incision."
      },
      "defaultPlanningMeasurementOD": {
        "type": "object",
        "properties": {
          "accuracy": {
            "type": "string"
          },
          "caseVersion": {
            "type": "string"
          },
          "lensState": {
            "type": "string"
          },
          "importStatus": {
            "type": "string"
          },
          "measurementMode": {
            "type": "string"
          },
          "source": {
            "type": "string"
          },
          "sourceId": {
            "type": "string"
          },
          "timeStamp": {
            "type": "string",
            "description": "The time stamp when the Observation was created or last updated."
          },
          "sourceVersion": {
            "type": "string"
          },
          "selectedElevenBoxSet": {
            "type": "string"
          },
          "biometry": {
            "$ref": "#/components/schemas/Biometry"
          },
          "keratometry": {
            "$ref": "#/components/schemas/Keratometry"
          },
          "imageSet": {
            "$ref": "#/components/schemas/ImageSet"
          },
          "incisionsAndArcs": {
            "$ref": "#/components/schemas/IncisionsAndArcs"
          },
          "refraction": {
            "$ref": "#/components/schemas/Refraction"
          },
          "elevenBoxSets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ElevenBoxSet"
            }
          },
          "formula": {
            "type": "string"
          },
          "additionalData": {
            "type": "string"
          },
          "additionalDataType": {
            "type": "string"
          },
          "sessionIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "surgeonCredentials": {
            "$ref": "#/components/schemas/SurgeonCredentials"
          },
          "eyeStatus": {
            "type": "string"
          },
          "planningDevice": {
            "type": "string"
          },
          "dicomStudyId": {
            "type": "string"
          },
          "measurementMasterSetReference": {
            "type": "string"
          },
          "defaultPlanningMeasurementTimeStamp": {
            "type": "string"
          },
          "biometrySource": {
            "type": "string"
          },
          "biometryParentMeasurement": {
            "type": "string"
          },
          "biometryTechnician": {
            "type": "string"
          },
          "biometryTechnicianReference": {
            "type": "string"
          },
          "biometryTimeStamp": {
            "type": "string"
          },
          "imageSource": {
            "type": "string"
          },
          "imageParentMeasurement": {
            "type": "string"
          },
          "imageTechnician": {
            "type": "string"
          },
          "imageTechnicianReference": {
            "type": "string"
          },
          "imageTimeStamp": {
            "type": "string"
          },
          "importedDataNameList": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "isDataUnTrackImported": {
            "type": "boolean"
          },
          "procedureRequestReference": {
            "type": "string"
          },
          "accessionId": {
            "type": "string"
          },
          "toricFormula": {
            "type": "string"
          },
          "response": {
            "$ref": "#/components/schemas/ExceptionResponseBody"
          },
          "caseId": {
            "$ref": "#/components/schemas/uuid",
            "description": "The case id (CarePlan/guid)."
          },
          "eye": {
            "type": "string",
            "description": "The eye."
          },
          "fromGuid": {
            "$ref": "#/components/schemas/uuid",
            "description": "The guid the resource was created from."
          },
          "guid": {
            "$ref": "#/components/schemas/uuid",
            "description": "The guid."
          },
          "lastUpdated": {
            "type": "string",
            "description": "The time the resource was last updated."
          },
          "parentMeasurement": {
            "$ref": "#/components/schemas/uuid",
            "description": "The parent measurement (Observation/guid)."
          },
          "patientReference": {
            "$ref": "#/components/schemas/uuid",
            "description": "The patient reference (Patient/guid)."
          },
          "patientVersion": {
            "type": "string",
            "description": "The version id of the Patient resource to ensure updated data is not overridden."
          },
          "status": {
            "type": "string",
            "description": "The status of the Observation, required by FHIR and always set to final by default."
          },
          "technician": {
            "type": "string",
            "description": "The technician name."
          },
          "technicianReference": {
            "$ref": "#/components/schemas/uuid",
            "description": "The technician reference (Practitioner/guid)."
          },
          "type": {
            "type": "string",
            "description": "The code representing the type of Observation."
          }
        },
        "description": "The defaultPlanningMeasurement associated with OD eye."
      },
      "defaultPlanningMeasurementOS": {
        "type": "object",
        "properties": {
          "accuracy": {
            "type": "string"
          },
          "caseVersion": {
            "type": "string"
          },
          "lensState": {
            "type": "string"
          },
          "importStatus": {
            "type": "string"
          },
          "measurementMode": {
            "type": "string"
          },
          "source": {
            "type": "string"
          },
          "sourceId": {
            "type": "string"
          },
          "timeStamp": {
            "type": "string",
            "description": "The time stamp when the Observation was created or last updated."
          },
          "sourceVersion": {
            "type": "string"
          },
          "selectedElevenBoxSet": {
            "type": "string"
          },
          "biometry": {
            "$ref": "#/components/schemas/Biometry"
          },
          "keratometry": {
            "$ref": "#/components/schemas/Keratometry"
          },
          "imageSet": {
            "$ref": "#/components/schemas/ImageSet"
          },
          "incisionsAndArcs": {
            "$ref": "#/components/schemas/IncisionsAndArcs"
          },
          "refraction": {
            "$ref": "#/components/schemas/Refraction"
          },
          "elevenBoxSets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ElevenBoxSet"
            }
          },
          "formula": {
            "type": "string"
          },
          "additionalData": {
            "type": "string"
          },
          "additionalDataType": {
            "type": "string"
          },
          "sessionIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "surgeonCredentials": {
            "$ref": "#/components/schemas/SurgeonCredentials"
          },
          "eyeStatus": {
            "type": "string"
          },
          "planningDevice": {
            "type": "string"
          },
          "dicomStudyId": {
            "type": "string"
          },
          "measurementMasterSetReference": {
            "type": "string"
          },
          "defaultPlanningMeasurementTimeStamp": {
            "type": "string"
          },
          "biometrySource": {
            "type": "string"
          },
          "biometryParentMeasurement": {
            "type": "string"
          },
          "biometryTechnician": {
            "type": "string"
          },
          "biometryTechnicianReference": {
            "type": "string"
          },
          "biometryTimeStamp": {
            "type": "string"
          },
          "imageSource": {
            "type": "string"
          },
          "imageParentMeasurement": {
            "type": "string"
          },
          "imageTechnician": {
            "type": "string"
          },
          "imageTechnicianReference": {
            "type": "string"
          },
          "imageTimeStamp": {
            "type": "string"
          },
          "importedDataNameList": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "isDataUnTrackImported": {
            "type": "boolean"
          },
          "procedureRequestReference": {
            "type": "string"
          },
          "accessionId": {
            "type": "string"
          },
          "toricFormula": {
            "type": "string"
          },
          "response": {
            "$ref": "#/components/schemas/ExceptionResponseBody"
          },
          "caseId": {
            "$ref": "#/components/schemas/uuid",
            "description": "The case id (CarePlan/guid)."
          },
          "eye": {
            "type": "string",
            "description": "The eye."
          },
          "fromGuid": {
            "$ref": "#/components/schemas/uuid",
            "description": "The guid the resource was created from."
          },
          "guid": {
            "$ref": "#/components/schemas/uuid",
            "description": "The guid."
          },
          "lastUpdated": {
            "type": "string",
            "description": "The time the resource was last updated."
          },
          "parentMeasurement": {
            "$ref": "#/components/schemas/uuid",
            "description": "The parent measurement (Observation/guid)."
          },
          "patientReference": {
            "$ref": "#/components/schemas/uuid",
            "description": "The patient reference (Patient/guid)."
          },
          "patientVersion": {
            "type": "string",
            "description": "The version id of the Patient resource to ensure updated data is not overridden."
          },
          "status": {
            "type": "string",
            "description": "The status of the Observation, required by FHIR and always set to final by default."
          },
          "technician": {
            "type": "string",
            "description": "The technician name."
          },
          "technicianReference": {
            "$ref": "#/components/schemas/uuid",
            "description": "The technician reference (Practitioner/guid)."
          },
          "type": {
            "type": "string",
            "description": "The code representing the type of Observation."
          }
        },
        "description": "The defaultPlanningMeasurement associated with OS eye."
      },
      "deviceCode": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The code."
          },
          "display": {
            "type": "string",
            "description": "The display."
          },
          "system": {
            "type": "string",
            "description": "The system."
          },
          "text": {
            "type": "string",
            "description": "The text."
          }
        },
        "description": "The coding of the device name."
      },
      "dhsSurgeonLensAConstants": {
        "type": "object",
        "properties": {
          "guid": {
            "type": "string",
            "description": "The identifier of this list resource for the UI to pass."
          },
          "surgeonAllLensAConstants": {
            "$ref": "#/components/schemas/surgeonAllLensAConstants"
          },
          "versionId": {
            "type": "string",
            "description": "The version identifier of this list resource for the UI to pass."
          }
        },
        "description": "The surgeon specified constants for all lenses."
      },
      "diameter": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of this CRIConfigurationDiameter (Cornea or User Defined)."
          },
          "userDefinedValue": {
            "type": "string",
            "description": "The userDefinedValue of this CRIConfigurationDiameter."
          }
        },
        "description": "The diameter of this CRITemplate."
      },
      "equivalentAverageTorsionalAmplitudeFP3": {
        "type": "object",
        "properties": {
          "unit": {
            "type": "string",
            "description": "The unit of measurement."
          },
          "value": {
            "type": "string",
            "description": "The value of measurement."
          }
        },
        "description": "The equivalent average torsional amplitude FP 3."
      },
      "equivalentAverageUltrasonicPowerFP3": {
        "type": "object",
        "properties": {
          "unit": {
            "type": "string",
            "description": "The unit of measurement."
          },
          "value": {
            "type": "string",
            "description": "The value of measurement."
          }
        },
        "description": "The equivalent average ultrasonic power FP 3."
      },
      "estimatedFluidUsage": {
        "type": "object",
        "properties": {
          "unit": {
            "type": "string",
            "description": "The unit of measurement."
          },
          "value": {
            "type": "string",
            "description": "The value of measurement."
          }
        },
        "description": "The estimated fluid usage."
      },
      "eyeAssessment": {
        "type": "object",
        "properties": {
          "dominantEye": {
            "type": "string",
            "description": "The dominant eye."
          },
          "lastUpdated": {
            "type": "string",
            "description": "The time stamp indicating when the object was last updated (yyyy-MM-dd'T'HH:mm:ss+00:00).",
            "example": "2021-05-12T12:34:33+00:00"
          },
          "guid": {
            "$ref": "#/components/schemas/uuid",
            "description": "The guid of the Patient this belongs to."
          },
          "leftOs": {
            "$ref": "#/components/schemas/leftOs"
          },
          "refraction": {
            "$ref": "#/components/schemas/refraction"
          },
          "rightOd": {
            "$ref": "#/components/schemas/rightOd"
          },
          "versionId": {
            "type": "string",
            "description": "The version id of the Patient this belongs to."
          }
        },
        "description": "The Stale copy of a plan's eye assessment. This stale copy is used to calculate a saved plan when it is opened from the planning list UI. This copy is updated with the current case eye assessment on plan recalculation."
      },
      "imageSet": {
        "type": "object",
        "properties": {
          "images": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Image"
            }
          },
          "selectedImage": {
            "type": "string"
          },
          "response": {
            "$ref": "#/components/schemas/ExceptionResponseBody"
          },
          "caseId": {
            "$ref": "#/components/schemas/uuid",
            "description": "The case id (CarePlan/guid)."
          },
          "eye": {
            "type": "string",
            "description": "The eye."
          },
          "fromGuid": {
            "$ref": "#/components/schemas/uuid",
            "description": "The guid the resource was created from."
          },
          "guid": {
            "$ref": "#/components/schemas/uuid",
            "description": "The guid."
          },
          "lastUpdated": {
            "type": "string",
            "description": "The time the resource was last updated."
          },
          "parentMeasurement": {
            "$ref": "#/components/schemas/uuid",
            "description": "The parent measurement (Observation/guid)."
          },
          "patientReference": {
            "$ref": "#/components/schemas/uuid",
            "description": "The patient reference (Patient/guid)."
          },
          "patientVersion": {
            "type": "string",
            "description": "The version id of the Patient resource to ensure updated data is not overridden."
          },
          "status": {
            "type": "string",
            "description": "The status of the Observation, required by FHIR and always set to final by default."
          },
          "technician": {
            "type": "string",
            "description": "The technician name."
          },
          "technicianReference": {
            "$ref": "#/components/schemas/uuid",
            "description": "The technician reference (Practitioner/guid)."
          },
          "timeStamp": {
            "type": "string",
            "description": "The time stamp when the Observation was created or last updated."
          },
          "type": {
            "type": "string",
            "description": "The code representing the type of Observation."
          }
        },
        "description": "The set of image data."
      },
      "incisionPreferences": {
        "type": "object",
        "properties": {
          "eye": {
            "type": "string",
            "description": "The eye."
          },
          "image": {
            "type": "string",
            "description": "The image."
          },
          "primaryIncisionPosition": {
            "type": "string",
            "description": "The primary incision position."
          },
          "primaryIncisionWidth": {
            "type": "string",
            "description": "The primary incision width."
          },
          "secondary1IncisionPosition": {
            "type": "string",
            "description": "The first secondary incision position."
          },
          "secondary1IncisionWidth": {
            "type": "string",
            "description": "The first secondary incision width."
          },
          "secondary2IncisionPosition": {
            "type": "string",
            "description": "The second secondary incision position."
          },
          "secondary2IncisionWidth": {
            "type": "string",
            "description": "The second secondary incision width."
          },
          "steepAxis": {
            "type": "boolean",
            "description": "The steep axis."
          }
        },
        "description": "The incision preference list."
      },
      "informationMessage": {
        "type": "object",
        "properties": {
          "messages": {
            "minItems": 0,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/messages"
            }
          },
          "requestId": {
            "type": "string",
            "description": "The id associated with the request."
          }
        },
        "description": "The optional warning/information messages associated with the response data message."
      },
      "iolArcBlendFactorTable": {
        "type": "object",
        "properties": {
          "minAstigmatism": {
            "type": "string",
            "description": "The minimum astigmatism."
          },
          "maxAstigmatism": {
            "type": "string",
            "description": "The maximum astigmatism."
          },
          "targetBlendFactor": {
            "type": "string",
            "description": "The target IOL/arcuate incision blend factor."
          }
        },
        "description": "The iol arc blend factor list."
      },
      "largeIncision": {
        "type": "object",
        "properties": {
          "temporalSia": {
            "type": "string",
            "description": "The temporal SIA."
          },
          "superiorSia": {
            "type": "string",
            "description": "The superior SIA."
          },
          "customSia": {
            "type": "string",
            "description": "The custom SIA."
          },
          "selectedAsDefault": {
            "type": "boolean",
            "description": "The selected as default flag."
          },
          "isCustom": {
            "type": "boolean",
            "description": "The is custom flag."
          },
          "currentSiaStatus": {
            "type": "string",
            "description": "The current SIA status."
          },
          "lastSiaUpdatedStatus": {
            "type": "string",
            "description": "The last SIA updated status."
          }
        },
        "description": "The large incision."
      },
      "leftOs": {
        "type": "object",
        "properties": {
          "dominantEye": {
            "type": "boolean",
            "description": "The dominant eye flag."
          },
          "ocularDisease": {
            "type": "string",
            "description": "The ocular disease which is deprecated field and it is here for backward compatibility and also support for UI."
          },
          "ocularDiseases": {
            "minItems": 0,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "postRefractive": {
            "type": "string",
            "description": "The post-operative refractive data."
          },
          "slitLamp": {
            "type": "string",
            "description": "The slit lamp."
          },
          "status": {
            "type": "string",
            "description": "The status."
          },
          "cataractGrade": {
            "type": "string",
            "description": "The cataract grade."
          },
          "cataractType": {
            "minItems": 0,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "vitreousBody": {
            "type": "string",
            "description": "The vitreous body."
          },
          "contactLensType": {
            "type": "string",
            "description": "The contact lens type."
          },
          "contactLensDuration": {
            "type": "string",
            "description": "The contact lens duration."
          },
          "contactLensDurationUnits": {
            "type": "string",
            "description": "The contact lens duration units."
          },
          "refractiveSurgeries": {
            "minItems": 0,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/refractiveSurgeries"
            }
          },
          "lensSurgeries": {
            "minItems": 0,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/lensSurgeries"
            }
          },
          "otherSurgeries": {
            "minItems": 0,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/otherSurgeries"
            }
          },
          "refractionVisualAcuityAssessments": {
            "minItems": 0,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/refractionVisualAcuityAssessments"
            }
          },
          "monoVision": {
            "type": "boolean",
            "description": "The mono vision."
          }
        },
        "description": "The left (OS) data."
      },
      "lens": {
        "type": "object",
        "properties": {
          "anteriorCapsuleDepth": {
            "type": "string",
            "description": "The lens anterior capsule depth, in units of micrometers."
          },
          "anteriorLensCurvature": {
            "type": "string",
            "description": "The lens anterior curvature, in units of millimeters."
          },
          "diameter": {
            "type": "string",
            "description": "The lens diameter, in units of millimeters."
          },
          "fragSize": {
            "type": "string",
            "description": "The fragment size."
          },
          "imageId": {
            "type": "string",
            "description": "The unique identifier of the associated image."
          },
          "lamellar": {
            "type": "string",
            "description": "The lens lamellar."
          },
          "layerSeparation": {
            "type": "string",
            "description": "The distance between laser pulse targets along the z-axis, in units of micrometers."
          },
          "lensAnteriorOffset": {
            "type": "string",
            "description": "The lens anterior offset, in units of micrometers."
          },
          "lensPosteriorOffset": {
            "type": "string",
            "description": "The lens posterior offset, in units of micrometers."
          },
          "method": {
            "type": "string",
            "description": "The lens destruction method.",
            "enum": [
              "CHOP",
              "FRAG"
            ]
          },
          "numberOfCuts": {
            "type": "string",
            "description": "The number of cuts."
          },
          "posteriorCapsuleDepth": {
            "type": "string",
            "description": "The lens posterior capsule depth, in units of micrometers."
          },
          "posteriorLensCurvature": {
            "type": "string",
            "description": "The lens posterior curvature, in units of millimeters."
          },
          "primaryIncisionAngleOffset": {
            "type": "string",
            "description": "The offset of the primary incision, in units of degrees."
          },
          "spokeLength": {
            "type": "string",
            "description": "The length of spokes."
          },
          "spokes": {
            "type": "string",
            "description": "The number of spokes."
          },
          "spotSeparation": {
            "type": "string",
            "description": "The distance between laser pulse targets in the x-y plane, in units of micrometers."
          },
          "zone1Energy": {
            "type": "string",
            "description": "The laser pulse energy in zone 1, in units of microjoules."
          },
          "zone2Energy": {
            "type": "string",
            "description": "The laser pulse energy in zone 2, in units of microjoules."
          },
          "zone3Energy": {
            "type": "string",
            "description": "The laser pulse energy in zone 3, in units of microjoules."
          },
          "zone4Energy": {
            "type": "string",
            "description": "The laser pulse energy in zone 4, in units of microjoules."
          },
          "zone5Energy": {
            "type": "string",
            "description": "The laser pulse energy in zone 5, in units of microjoules."
          }
        },
        "description": "The lens parameters."
      },
      "lensSurgeries": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of lens surgery."
          },
          "date": {
            "type": "string",
            "description": "The date of lens surgery (mm/dd/yyyy).",
            "format": "date"
          },
          "surgeonName": {
            "type": "string",
            "description": "The surgeon name of lens surgery."
          },
          "surgeonReference": {
            "type": "string",
            "description": "The surgeon reference of lens surgery."
          },
          "timeStamp": {
            "type": "string",
            "description": "The timeStamp of lens surgery.",
            "example": "12:23:23"
          }
        },
        "description": "The lens surgeries list."
      },
      "lenses": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier of this lens (1 - 999).",
            "example": "1"
          },
          "lensType": {
            "type": "string",
            "description": "The type of this lens.",
            "enum": [
              "Aspheric",
              "Limbus",
              "Monofocal",
              "Multifocal",
              "Toric"
            ]
          },
          "model": {
            "type": "string",
            "description": "The model name of this lens (SN6AT9 [6.00 D]-Aspheric | 573T1050 | MC40BD).",
            "example": "MC40BD"
          },
          "oraLensId": {
            "type": "string",
            "description": "The unique ORA identifier of this lens."
          },
          "surgeonFactor": {
            "type": "string",
            "description": "The surgeon factor which is deprecated field and it is here for backward compatibility."
          },
          "mfgAconstantOptical": {
            "type": "string",
            "description": "The manufacturer recommended A-Constant for this lens for optical measurements (115.643 - 120.1881).",
            "example": "120"
          },
          "mfgAconstantUltrasound": {
            "type": "string",
            "description": "The manufacturer recommended A-Constant for this lens for ultrasound measurements (115.3 - 119.8451).",
            "example": "116"
          },
          "chamberType": {
            "type": "string",
            "description": "The chamber in which this lens.",
            "example": "Anterior",
            "enum": [
              "Anterior",
              "Posterior"
            ]
          },
          "chamberTypeId": {
            "type": "integer",
            "description": "The unique identifier of the chamber in which this lens.",
            "format": "int32"
          },
          "cylinderPowerIolPlane": {
            "type": "number",
            "description": "The cylinder power in the IOL plane of this lens, in units of diopters.",
            "format": "double"
          },
          "hapticAngle": {
            "type": "number",
            "description": "The angulation of this lens haptics, in units of degrees.",
            "format": "double"
          },
          "hapticMaterial": {
            "type": "string",
            "description": "The type of material of this lens.",
            "enum": [
              "haptics",
              "Acrylic",
              "PMMA",
              "Polymide"
            ]
          },
          "hapticMaterialId": {
            "type": "integer",
            "description": "The unique identifier of the type of material of this lens.",
            "format": "int32"
          },
          "length": {
            "type": "number",
            "description": "The overall length of this lens in units of millimeters.",
            "format": "double"
          },
          "lensTypeId": {
            "type": "integer",
            "description": "The unique identifier of the type of this lens.",
            "format": "int32"
          },
          "manufacturer": {
            "type": "string",
            "description": "The manufacturer of this lens.",
            "enum": [
              "Alcon",
              "AMO",
              "Millennium",
              "Rayner",
              "Staar"
            ]
          },
          "measurementType": {
            "type": "string",
            "description": "The type of measurements for this lens.",
            "enum": [
              "Optical",
              "Ultrasound"
            ]
          },
          "measurementTypeId": {
            "type": "integer",
            "description": "The unique identifier of the type of measurements for this lens.",
            "format": "int32"
          },
          "notes": {
            "type": "string",
            "description": "The notes about this lens."
          },
          "opticMaterial": {
            "type": "string",
            "description": "The type of material of this lens.",
            "enum": [
              "optics",
              "Acrylic",
              "PMMA",
              "Silicone"
            ]
          },
          "opticMaterialId": {
            "type": "integer",
            "description": "The unique identifier of the type of material of this lens.",
            "format": "int32"
          },
          "opticSize": {
            "type": "number",
            "description": "The diameter of this lens optics, in units of millimeters.",
            "format": "double"
          },
          "oraAConstant": {
            "type": "number",
            "description": "The ORA recommended A-Constant value for this lens.",
            "format": "double"
          },
          "oraManufacturerId": {
            "type": "integer",
            "description": "The unique ORA manufacturer of this lens identifer.",
            "format": "int32"
          },
          "oraSurgeonFactor": {
            "type": "number",
            "description": "The ORA recommended surgeon factor for this lens.",
            "format": "double"
          },
          "powerRange": {
            "minItems": 0,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/powerRange"
            }
          },
          "retypeMfgAconstantOptical": {
            "type": "number",
            "description": "The retyped manufacturer recommended A-Constant for this lens for optical measurements.",
            "format": "double"
          },
          "retypeMfgAconstantUltrasound": {
            "type": "number",
            "description": "The retyped manufacturer recommended A-Constant for this lens for ultrasound measurements.",
            "format": "double"
          },
          "rotationType": {
            "type": "string",
            "description": "The rotation type of this lens, always Both."
          },
          "rotationTypeId": {
            "type": "integer",
            "description": "The unique identifier of the rotation type of this lens.",
            "format": "int32"
          }
        },
        "description": "The lens detail data for this lens family list."
      },
      "measurementMasterSet": {
        "type": "object",
        "properties": {
          "preOpSet": {
            "$ref": "#/components/schemas/PreOpMeasurementSet"
          },
          "intraOp": {
            "$ref": "#/components/schemas/IntraOp"
          },
          "postOpSet": {
            "$ref": "#/components/schemas/PostOpMeasurementSet"
          },
          "caseDetailsReference": {
            "type": "string"
          },
          "surgicalPlanReference": {
            "type": "string"
          },
          "response": {
            "$ref": "#/components/schemas/ExceptionResponseBody"
          },
          "caseId": {
            "$ref": "#/components/schemas/uuid",
            "description": "The case id (CarePlan/guid)."
          },
          "eye": {
            "type": "string",
            "description": "The eye."
          },
          "fromGuid": {
            "$ref": "#/components/schemas/uuid",
            "description": "The guid the resource was created from."
          },
          "guid": {
            "$ref": "#/components/schemas/uuid",
            "description": "The guid."
          },
          "lastUpdated": {
            "type": "string",
            "description": "The time the resource was last updated."
          },
          "parentMeasurement": {
            "$ref": "#/components/schemas/uuid",
            "description": "The parent measurement (Observation/guid)."
          },
          "patientReference": {
            "$ref": "#/components/schemas/uuid",
            "description": "The patient reference (Patient/guid)."
          },
          "patientVersion": {
            "type": "string",
            "description": "The version id of the Patient resource to ensure updated data is not overridden."
          },
          "status": {
            "type": "string",
            "description": "The status of the Observation, required by FHIR and always set to final by default."
          },
          "technician": {
            "type": "string",
            "description": "The technician name."
          },
          "technicianReference": {
            "$ref": "#/components/schemas/uuid",
            "description": "The technician reference (Practitioner/guid)."
          },
          "timeStamp": {
            "type": "string",
            "description": "The time stamp when the Observation was created or last updated."
          },
          "type": {
            "type": "string",
            "description": "The code representing the type of Observation."
          }
        },
        "description": "The measurement master set."
      },
      "measurements": {
        "type": "object",
        "properties": {
          "biometricMeasurementMode": {
            "type": "string",
            "description": "The biometric measurement mode."
          },
          "defaultPreOpPlanningBiometrySource": {
            "type": "string",
            "description": "The default source of pre-operative planning Biometry data."
          },
          "defaultPreOpPlanningKeratometrySource": {
            "type": "string",
            "description": "The default source of pre-operative planning Keratometry data."
          },
          "defaultPreOpPlanningSource": {
            "type": "string",
            "description": "The default source of pre-operative planning data."
          },
          "defaultVertex": {
            "type": "string",
            "description": "The default vertex."
          },
          "keratometerMode": {
            "type": "string",
            "description": "The keratometer mode."
          },
          "keratometerRefractiveIndex": {
            "type": "string",
            "description": "The keratometer refractive index."
          }
        },
        "description": "The measurements."
      },
      "mediumIncision": {
        "type": "object",
        "properties": {
          "temporalSia": {
            "type": "string",
            "description": "The temporal SIA."
          },
          "superiorSia": {
            "type": "string",
            "description": "The superior SIA."
          },
          "customSia": {
            "type": "string",
            "description": "The custom SIA."
          },
          "selectedAsDefault": {
            "type": "boolean",
            "description": "The selected as default flag."
          },
          "isCustom": {
            "type": "boolean",
            "description": "The is custom flag."
          },
          "currentSiaStatus": {
            "type": "string",
            "description": "The current SIA status."
          },
          "lastSiaUpdatedStatus": {
            "type": "string",
            "description": "The last SIA updated status."
          }
        },
        "description": "The medium incision."
      },
      "nomogramConfigurations": {
        "type": "object",
        "properties": {
          "arculateIncisionMethod": {
            "type": "string",
            "description": "The arcuate incision policy.",
            "enum": [
              "Single",
              "Paired",
              "No Arcs"
            ]
          },
          "arcDepth": {
            "type": "string",
            "description": "The normalized (with respect to central corneal thickness) depth of the arcuate incision(s)."
          },
          "arcDiameter": {
            "type": "string",
            "description": "The diameter of the arcuate incision(s), in units of millimeters."
          },
          "stepAxisSplit": {
            "type": "string",
            "description": "The type of nomogram table steep axis split.",
            "enum": [
              "Any",
              "ATR/WTR",
              "Superior/Temporal/Oblique"
            ]
          },
          "ageSplit": {
            "$ref": "#/components/schemas/ageSplit"
          },
          "preOpSplit": {
            "$ref": "#/components/schemas/preOpSplit"
          },
          "showNomogramConfiguration": {
            "type": "boolean",
            "description": "The display this nomogram flag."
          },
          "stepAxisSplitValues": {
            "type": "string",
            "description": "The arcuate incision widths for this nomogram in csv row-colcolonwidth."
          }
        },
        "description": "The arcuate incision width nomogram configuration list."
      },
      "nomograms": {
        "type": "object",
        "properties": {
          "guid": {
            "type": "string",
            "description": "The unique identifier of this nomogram."
          },
          "createdBy": {
            "type": "string",
            "description": "The author of this nomogram."
          },
          "isPublic": {
            "type": "boolean",
            "description": "The this nomogram is public flag."
          },
          "nomogramName": {
            "type": "string",
            "description": "The name of this nomogram."
          },
          "nomogramNotes": {
            "type": "string",
            "description": "The notes about this nomogram."
          },
          "nomogramConfigurations": {
            "minItems": 0,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/nomogramConfigurations"
            }
          },
          "isChecked": {
            "type": "boolean",
            "description": "The this nomogram is checked flag."
          },
          "nomogramSeq": {
            "type": "string",
            "description": "The sequence number of this nomogram."
          },
          "lastUpdated": {
            "type": "string",
            "description": "The date of last update of this nomogram."
          }
        },
        "description": "The arcuate incision width nomogram information list."
      },
      "notes": {
        "type": "object",
        "properties": {
          "author": {
            "type": "string",
            "description": "The author."
          },
          "caseId": {
            "type": "string",
            "description": "The uid of the CarePlan the note belongs to."
          },
          "content": {
            "type": "string",
            "description": "The content."
          },
          "creationTimeStamp": {
            "type": "string",
            "description": "The creation timestamp."
          },
          "date": {
            "type": "string",
            "description": "The date."
          },
          "flagged": {
            "type": "boolean",
            "description": "The flagged flag."
          },
          "noteType": {
            "type": "string",
            "description": "The type of note."
          },
          "read": {
            "type": "boolean",
            "description": "The read flag."
          },
          "time": {
            "type": "string",
            "description": "The time."
          },
          "timeZone": {
            "type": "string",
            "description": "The time zone."
          },
          "versionId": {
            "type": "string",
            "description": "The version id."
          },
          "guid": {
            "type": "string",
            "description": "The unique identifier of this note."
          }
        },
        "description": "The case notes list."
      },
      "odPostRefraction": {
        "type": "object",
        "properties": {
          "axis": {
            "type": "string"
          },
          "cyl": {
            "type": "string"
          },
          "seq": {
            "type": "string"
          },
          "sph": {
            "type": "string"
          },
          "method": {
            "type": "string"
          },
          "intAdd": {
            "type": "string"
          },
          "nearAdd": {
            "type": "string"
          },
          "response": {
            "$ref": "#/components/schemas/ExceptionResponseBody"
          },
          "caseId": {
            "$ref": "#/components/schemas/uuid",
            "description": "The case id (CarePlan/guid)."
          },
          "eye": {
            "type": "string",
            "description": "The eye."
          },
          "fromGuid": {
            "$ref": "#/components/schemas/uuid",
            "description": "The guid the resource was created from."
          },
          "guid": {
            "$ref": "#/components/schemas/uuid",
            "description": "The guid."
          },
          "lastUpdated": {
            "type": "string",
            "description": "The time the resource was last updated."
          },
          "parentMeasurement": {
            "$ref": "#/components/schemas/uuid",
            "description": "The parent measurement (Observation/guid)."
          },
          "patientReference": {
            "$ref": "#/components/schemas/uuid",
            "description": "The patient reference (Patient/guid)."
          },
          "patientVersion": {
            "type": "string",
            "description": "The version id of the Patient resource to ensure updated data is not overridden."
          },
          "status": {
            "type": "string",
            "description": "The status of the Observation, required by FHIR and always set to final by default."
          },
          "technician": {
            "type": "string",
            "description": "The technician name."
          },
          "technicianReference": {
            "$ref": "#/components/schemas/uuid",
            "description": "The technician reference (Practitioner/guid)."
          },
          "timeStamp": {
            "type": "string",
            "description": "The time stamp when the Observation was created or last updated."
          },
          "type": {
            "type": "string",
            "description": "The code representing the type of Observation."
          }
        },
        "description": "The right eye post-operative refraction data."
      },
      "odPreRefraction": {
        "type": "object",
        "properties": {
          "axis": {
            "type": "string"
          },
          "cyl": {
            "type": "string"
          },
          "seq": {
            "type": "string"
          },
          "sph": {
            "type": "string"
          },
          "method": {
            "type": "string"
          },
          "intAdd": {
            "type": "string"
          },
          "nearAdd": {
            "type": "string"
          },
          "response": {
            "$ref": "#/components/schemas/ExceptionResponseBody"
          },
          "caseId": {
            "$ref": "#/components/schemas/uuid",
            "description": "The case id (CarePlan/guid)."
          },
          "eye": {
            "type": "string",
            "description": "The eye."
          },
          "fromGuid": {
            "$ref": "#/components/schemas/uuid",
            "description": "The guid the resource was created from."
          },
          "guid": {
            "$ref": "#/components/schemas/uuid",
            "description": "The guid."
          },
          "lastUpdated": {
            "type": "string",
            "description": "The time the resource was last updated."
          },
          "parentMeasurement": {
            "$ref": "#/components/schemas/uuid",
            "description": "The parent measurement (Observation/guid)."
          },
          "patientReference": {
            "$ref": "#/components/schemas/uuid",
            "description": "The patient reference (Patient/guid)."
          },
          "patientVersion": {
            "type": "string",
            "description": "The version id of the Patient resource to ensure updated data is not overridden."
          },
          "status": {
            "type": "string",
            "description": "The status of the Observation, required by FHIR and always set to final by default."
          },
          "technician": {
            "type": "string",
            "description": "The technician name."
          },
          "technicianReference": {
            "$ref": "#/components/schemas/uuid",
            "description": "The technician reference (Practitioner/guid)."
          },
          "timeStamp": {
            "type": "string",
            "description": "The time stamp when the Observation was created or last updated."
          },
          "type": {
            "type": "string",
            "description": "The code representing the type of Observation."
          }
        },
        "description": "The right eye pre-operative refraction data."
      },
      "osPostRefraction": {
        "type": "object",
        "properties": {
          "axis": {
            "type": "string"
          },
          "cyl": {
            "type": "string"
          },
          "seq": {
            "type": "string"
          },
          "sph": {
            "type": "string"
          },
          "method": {
            "type": "string"
          },
          "intAdd": {
            "type": "string"
          },
          "nearAdd": {
            "type": "string"
          },
          "response": {
            "$ref": "#/components/schemas/ExceptionResponseBody"
          },
          "caseId": {
            "$ref": "#/components/schemas/uuid",
            "description": "The case id (CarePlan/guid)."
          },
          "eye": {
            "type": "string",
            "description": "The eye."
          },
          "fromGuid": {
            "$ref": "#/components/schemas/uuid",
            "description": "The guid the resource was created from."
          },
          "guid": {
            "$ref": "#/components/schemas/uuid",
            "description": "The guid."
          },
          "lastUpdated": {
            "type": "string",
            "description": "The time the resource was last updated."
          },
          "parentMeasurement": {
            "$ref": "#/components/schemas/uuid",
            "description": "The parent measurement (Observation/guid)."
          },
          "patientReference": {
            "$ref": "#/components/schemas/uuid",
            "description": "The patient reference (Patient/guid)."
          },
          "patientVersion": {
            "type": "string",
            "description": "The version id of the Patient resource to ensure updated data is not overridden."
          },
          "status": {
            "type": "string",
            "description": "The status of the Observation, required by FHIR and always set to final by default."
          },
          "technician": {
            "type": "string",
            "description": "The technician name."
          },
          "technicianReference": {
            "$ref": "#/components/schemas/uuid",
            "description": "The technician reference (Practitioner/guid)."
          },
          "timeStamp": {
            "type": "string",
            "description": "The time stamp when the Observation was created or last updated."
          },
          "type": {
            "type": "string",
            "description": "The code representing the type of Observation."
          }
        },
        "description": "The left eye post-operative refraction data."
      },
      "osPreRefraction": {
        "type": "object",
        "properties": {
          "axis": {
            "type": "string"
          },
          "cyl": {
            "type": "string"
          },
          "seq": {
            "type": "string"
          },
          "sph": {
            "type": "string"
          },
          "method": {
            "type": "string"
          },
          "intAdd": {
            "type": "string"
          },
          "nearAdd": {
            "type": "string"
          },
          "response": {
            "$ref": "#/components/schemas/ExceptionResponseBody"
          },
          "caseId": {
            "$ref": "#/components/schemas/uuid",
            "description": "The case id (CarePlan/guid)."
          },
          "eye": {
            "type": "string",
            "description": "The eye."
          },
          "fromGuid": {
            "$ref": "#/components/schemas/uuid",
            "description": "The guid the resource was created from."
          },
          "guid": {
            "$ref": "#/components/schemas/uuid",
            "description": "The guid."
          },
          "lastUpdated": {
            "type": "string",
            "description": "The time the resource was last updated."
          },
          "parentMeasurement": {
            "$ref": "#/components/schemas/uuid",
            "description": "The parent measurement (Observation/guid)."
          },
          "patientReference": {
            "$ref": "#/components/schemas/uuid",
            "description": "The patient reference (Patient/guid)."
          },
          "patientVersion": {
            "type": "string",
            "description": "The version id of the Patient resource to ensure updated data is not overridden."
          },
          "status": {
            "type": "string",
            "description": "The status of the Observation, required by FHIR and always set to final by default."
          },
          "technician": {
            "type": "string",
            "description": "The technician name."
          },
          "technicianReference": {
            "$ref": "#/components/schemas/uuid",
            "description": "The technician reference (Practitioner/guid)."
          },
          "timeStamp": {
            "type": "string",
            "description": "The time stamp when the Observation was created or last updated."
          },
          "type": {
            "type": "string",
            "description": "The code representing the type of Observation."
          }
        },
        "description": "The left eye pre-operative refraction data."
      },
      "otherSurgeries": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of other surgery."
          },
          "date": {
            "type": "string",
            "format": "date",
            "description": "The date of other surgery.",
            "example": "01/01/2024"
          },
          "timeStamp": {
            "type": "string",
            "description": "The timeStamp of other surgery."
          }
        },
        "description": "The other surgeries list."
      },
      "phakicMeasurementSet": {
        "type": "object",
        "properties": {
          "phakicPreOp": {
            "$ref": "#/components/schemas/phakicPreOp"
          }
        },
        "description": "The phakic measurement set for pseudophakic surgery."
      },
      "phakicPreOp": {
        "type": "object",
        "properties": {
          "acd": {
            "type": "string",
            "description": "The phakic anterior chamber depth (acd) for pseudophakic surgery in units of millimeters.",
            "examples": {
              "Barrett True-K": {
                "value": "2",
                "summary": "2 - 6 for Barrett True-K"
              },
              "other Barrett formulas": {
                "value": "3",
                "summary": "1.2 - 6 for other Barrett formulas"
              },
              "other formulas": {
                "value": "4",
                "summary": "1.2 - 12 for other formulas"
              }
            }
          },
          "lt": {
            "type": "string",
            "description": "The phakic lens thickness (lt) for pseudophakic surgery in units of millimeters.",
            "examples": {
              "Barrett True-K": {
                "value": "2",
                "summary": "2 - 8 for Barrett"
              },
              "other Barrett formulas": {
                "value": "3",
                "summary": "2 - 8 for other Barrett formulas"
              },
              "other formulas": {
                "value": "4",
                "summary": "1.2 - 12 for other formulas"
              }
            }
          },
          "phakicRefraction": {
            "$ref": "#/components/schemas/phakicRefraction"
          }
        },
        "description": "The phakic pre-operation data for pseudophakic surgery."
      },
      "phakicRefraction": {
        "type": "object",
        "properties": {
          "cyl": {
            "type": "integer",
            "description": "The phakic cylinder (cyl) for pseudophakic surgery in units of diopters.",
            "minimum": -30,
            "maximum": 30
          },
          "sph": {
            "type": "integer",
            "description": "The phakic sphere (sph) for pseudophakic surgery in units of diopters.",
            "minimum": -30,
            "maximum": 30
          },
          "steep": {
            "type": "integer",
            "description": "The phakic steep for pseudophakic surgery in units of degrees.",
            "minimum": 0,
            "maximum": 179
          },
          "vertex": {
            "type": "integer",
            "description": "The phakic vertex for pseudophakic surgery in units of millimeters.",
            "minimum": 0,
            "maximum": 20
          }
        },
        "description": "The phakic refraction for pseudophakic surgery."
      },
      "planning": {
        "type": "object",
        "properties": {
          "applyHolladayToric": {
            "type": "boolean",
            "description": "The flag to perform the Holladay Toric SIA calculation."
          },
          "defaultFormula": {
            "type": "string",
            "description": "The default formula."
          },
          "defaultNomogram": {
            "type": "string",
            "description": "The default nomogram."
          },
          "defaultOpticalZone": {
            "type": "string",
            "description": "The default optical zone for Laser Arcs nomogra (8 | 9 | 10 mm).",
            "example": "8 mm"
          },
          "defaultPostRefractiveFormula": {
            "type": "string",
            "description": "The default post refractive formula."
          },
          "defaultLaserFactor": {
            "type": "string",
            "description": "The default laser factor for Laser Arcs nomogram (0.6 - 1.4).",
            "example": "0.6"
          },
          "defaultTargetSeq": {
            "type": "string",
            "description": "The default target SEQ."
          },
          "defaultToricFormula": {
            "type": "string",
            "description": "The default toric formula."
          },
          "iolOrientation": {
            "type": "string",
            "description": "The IOL orientation."
          },
          "iolSeqResultsAwayFromRecommendation": {
            "type": "string",
            "description": "The default number of IOL SEQ results away from recommendation."
          },
          "planPdfFormat": {
            "type": "string",
            "description": "The plan PDF format."
          },
          "residualCylinderWarningThreshold": {
            "type": "string",
            "description": "The residual cylinder warning threshold."
          },
          "secondaryProcedures": {
            "minItems": 0,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "surgeonNavigation": {
            "type": "string",
            "description": "The surgeon navigation."
          },
          "useBarrettTrueAL": {
            "type": "boolean",
            "description": "The Barrett True AL use for Argos measurements."
          },
          "visualAcuityUnits": {
            "type": "string",
            "description": "The units for visual acuity."
          }
        },
        "description": "The planning."
      },
      "postRefraction": {
        "type": "object",
        "properties": {
          "axis": {
            "type": "string"
          },
          "cyl": {
            "type": "string"
          },
          "seq": {
            "type": "string"
          },
          "sph": {
            "type": "string"
          },
          "method": {
            "type": "string"
          },
          "intAdd": {
            "type": "string"
          },
          "nearAdd": {
            "type": "string"
          },
          "response": {
            "$ref": "#/components/schemas/ExceptionResponseBody"
          },
          "caseId": {
            "$ref": "#/components/schemas/uuid",
            "description": "The case id (CarePlan/guid)."
          },
          "eye": {
            "type": "string",
            "description": "The eye."
          },
          "fromGuid": {
            "$ref": "#/components/schemas/uuid",
            "description": "The guid the resource was created from."
          },
          "guid": {
            "$ref": "#/components/schemas/uuid",
            "description": "The guid."
          },
          "lastUpdated": {
            "type": "string",
            "description": "The time the resource was last updated."
          },
          "parentMeasurement": {
            "$ref": "#/components/schemas/uuid",
            "description": "The parent measurement (Observation/guid)."
          },
          "patientReference": {
            "$ref": "#/components/schemas/uuid",
            "description": "The patient reference (Patient/guid)."
          },
          "patientVersion": {
            "type": "string",
            "description": "The version id of the Patient resource to ensure updated data is not overridden."
          },
          "status": {
            "type": "string",
            "description": "The status of the Observation, required by FHIR and always set to final by default."
          },
          "technician": {
            "type": "string",
            "description": "The technician name."
          },
          "technicianReference": {
            "$ref": "#/components/schemas/uuid",
            "description": "The technician reference (Practitioner/guid)."
          },
          "timeStamp": {
            "type": "string",
            "description": "The time stamp when the Observation was created or last updated."
          },
          "type": {
            "type": "string",
            "description": "The code representing the type of Observation."
          }
        },
        "description": "The post Refraction."
      },
      "powerRange": {
        "type": "object",
        "properties": {
          "high": {
            "type": "number",
            "description": "The maximum power in this IOL SEQ power range, in units of diopters.",
            "format": "double"
          },
          "id": {
            "type": "integer",
            "description": "The unique identifier of this IOL SEQ power range.",
            "format": "int32"
          },
          "increment": {
            "type": "number",
            "description": "The power increment in this IOL SEQ power range, in units of diopters.",
            "format": "double"
          },
          "isActive": {
            "type": "boolean",
            "description": "The this IOL SEQ power range is active flag."
          },
          "low": {
            "type": "number",
            "description": "The minimum power in this IOL SEQ power range, in units of diopters.",
            "format": "double"
          }
        },
        "description": "The IOL SEQ power range for this lens list."
      },
      "practitioners": {
        "type": "object",
        "properties": {
          "active": {
            "type": "string",
            "description": "The active status."
          },
          "email": {
            "type": "string",
            "description": "The email address."
          },
          "facilityReference": {
            "minItems": 0,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "facilityReferenceString": {
            "type": "string",
            "description": "The facility reference string as it is stored in CDR."
          },
          "firstName": {
            "type": "string",
            "description": "The given name."
          },
          "dhsSurgeonLensAConstants": {
            "$ref": "#/components/schemas/dhsSurgeonLensAConstants"
          },
          "gender": {
            "type": "string",
            "description": "The gender."
          },
          "guid": {
            "type": "string",
            "description": "The unique identifier."
          },
          "informationMessage": {
            "$ref": "#/components/schemas/informationMessage"
          },
          "isTestUser": {
            "type": "boolean",
            "description": "The is test user."
          },
          "lastName": {
            "type": "string",
            "description": "The family name."
          },
          "lastUpdated": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time of the last update (yyyy-mm-ddThh:mm:ss[Z|(+|-)hh:mm]).",
            "example": "2023-08-11T21:34:34Z"
          },
          "middleName": {
            "type": "string",
            "description": "The middle name."
          },
          "name": {
            "type": "string",
            "description": "The displayed name returned in the surgeon list."
          },
          "optimizationsAccess": {
            "type": "string",
            "description": "The JSON string representation of optimizations access."
          },
          "practiceOrgId": {
            "type": "string",
            "description": "The practice organization id."
          },
          "prefix": {
            "type": "string",
            "description": "The prefix."
          },
          "reference": {
            "$ref": "#/components/schemas/uuid",
            "description": "The reference (Practitioner/guid) used in returning the surgeon list."
          },
          "role": {
            "type": "string",
            "description": "The role."
          },
          "roleCode": {
            "type": "string",
            "description": "The code of the role."
          },
          "rt2dAlgoDataAccess": {
            "type": "string",
            "description": "The rt2d algo data access for this practitioner.",
            "enum": [
              "NotAllowed",
              "Allowed"
            ]
          },
          "suffix": {
            "type": "string",
            "description": "The suffix."
          },
          "surgeonPreferences": {
            "type": "string",
            "description": "The JSON string representation of surgeon preferences."
          },
          "textName": {
            "type": "string",
            "description": "The text name."
          },
          "versionId": {
            "type": "string",
            "description": "The version id."
          }
        },
        "description": "The practitioner list."
      },
      "preOpSplit": {
        "type": "object",
        "properties": {
          "min": {
            "type": "string",
            "description": "The age of the patient lower limit for the nomogram columns, in units of years or pre-operative cyl power of the patient lower limit for the nomogram rows, in units of diopters."
          },
          "max": {
            "type": "string",
            "description": "The age of the patient upper limit for the nomogram columns, in units of years or pre-operative cyl power of the patient upper limit for the nomogram rows, in units of diopters."
          },
          "step": {
            "type": "string",
            "description": "The age of the patient step size for the nomogram columns, in units of years or pre-operative cyl power of the patient step size for the nomogram rows, in units of diopters."
          }
        },
        "description": "The patient preOp cyl splits (rows) for this nomogram."
      },
      "preOps": {
        "type": "object",
        "properties": {
          "accuracy": {
            "type": "string"
          },
          "caseVersion": {
            "type": "string"
          },
          "lensState": {
            "type": "string"
          },
          "importStatus": {
            "type": "string"
          },
          "measurementMode": {
            "type": "string"
          },
          "source": {
            "type": "string"
          },
          "sourceId": {
            "type": "string"
          },
          "timeStamp": {
            "type": "string",
            "description": "The time stamp when the Observation was created or last updated."
          },
          "sourceVersion": {
            "type": "string"
          },
          "selectedElevenBoxSet": {
            "type": "string"
          },
          "biometry": {
            "$ref": "#/components/schemas/Biometry"
          },
          "keratometry": {
            "$ref": "#/components/schemas/Keratometry"
          },
          "imageSet": {
            "$ref": "#/components/schemas/ImageSet"
          },
          "incisionsAndArcs": {
            "$ref": "#/components/schemas/IncisionsAndArcs"
          },
          "refraction": {
            "$ref": "#/components/schemas/Refraction"
          },
          "elevenBoxSets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ElevenBoxSet"
            }
          },
          "formula": {
            "type": "string"
          },
          "additionalData": {
            "type": "string"
          },
          "additionalDataType": {
            "type": "string"
          },
          "sessionIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "surgeonCredentials": {
            "$ref": "#/components/schemas/SurgeonCredentials"
          },
          "eyeStatus": {
            "type": "string"
          },
          "planningDevice": {
            "type": "string"
          },
          "dicomStudyId": {
            "type": "string"
          },
          "measurementMasterSetReference": {
            "type": "string"
          },
          "defaultPlanningMeasurementTimeStamp": {
            "type": "string"
          },
          "biometrySource": {
            "type": "string"
          },
          "biometryParentMeasurement": {
            "type": "string"
          },
          "biometryTechnician": {
            "type": "string"
          },
          "biometryTechnicianReference": {
            "type": "string"
          },
          "biometryTimeStamp": {
            "type": "string"
          },
          "imageSource": {
            "type": "string"
          },
          "imageParentMeasurement": {
            "type": "string"
          },
          "imageTechnician": {
            "type": "string"
          },
          "imageTechnicianReference": {
            "type": "string"
          },
          "imageTimeStamp": {
            "type": "string"
          },
          "importedDataNameList": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "isDataUnTrackImported": {
            "type": "boolean"
          },
          "procedureRequestReference": {
            "type": "string"
          },
          "accessionId": {
            "type": "string"
          },
          "toricFormula": {
            "type": "string"
          },
          "response": {
            "$ref": "#/components/schemas/ExceptionResponseBody"
          },
          "caseId": {
            "$ref": "#/components/schemas/uuid",
            "description": "The case id (CarePlan/guid)."
          },
          "eye": {
            "type": "string",
            "description": "The eye."
          },
          "fromGuid": {
            "$ref": "#/components/schemas/uuid",
            "description": "The guid the resource was created from."
          },
          "guid": {
            "$ref": "#/components/schemas/uuid",
            "description": "The guid."
          },
          "lastUpdated": {
            "type": "string",
            "description": "The time the resource was last updated."
          },
          "parentMeasurement": {
            "$ref": "#/components/schemas/uuid",
            "description": "The parent measurement (Observation/guid)."
          },
          "patientReference": {
            "$ref": "#/components/schemas/uuid",
            "description": "The patient reference (Patient/guid)."
          },
          "patientVersion": {
            "type": "string",
            "description": "The version id of the Patient resource to ensure updated data is not overridden."
          },
          "status": {
            "type": "string",
            "description": "The status of the Observation, required by FHIR and always set to final by default."
          },
          "technician": {
            "type": "string",
            "description": "The technician name."
          },
          "technicianReference": {
            "$ref": "#/components/schemas/uuid",
            "description": "The technician reference (Practitioner/guid)."
          },
          "type": {
            "type": "string",
            "description": "The code representing the type of Observation."
          }
        },
        "description": "The pre=operative measurements list."
      },
      "preRefraction": {
        "type": "object",
        "properties": {
          "axis": {
            "type": "string"
          },
          "cyl": {
            "type": "string"
          },
          "seq": {
            "type": "string"
          },
          "sph": {
            "type": "string"
          },
          "method": {
            "type": "string"
          },
          "intAdd": {
            "type": "string"
          },
          "nearAdd": {
            "type": "string"
          },
          "response": {
            "$ref": "#/components/schemas/ExceptionResponseBody"
          },
          "caseId": {
            "$ref": "#/components/schemas/uuid",
            "description": "The case id (CarePlan/guid)."
          },
          "eye": {
            "type": "string",
            "description": "The eye."
          },
          "fromGuid": {
            "$ref": "#/components/schemas/uuid",
            "description": "The guid the resource was created from."
          },
          "guid": {
            "$ref": "#/components/schemas/uuid",
            "description": "The guid."
          },
          "lastUpdated": {
            "type": "string",
            "description": "The time the resource was last updated."
          },
          "parentMeasurement": {
            "$ref": "#/components/schemas/uuid",
            "description": "The parent measurement (Observation/guid)."
          },
          "patientReference": {
            "$ref": "#/components/schemas/uuid",
            "description": "The patient reference (Patient/guid)."
          },
          "patientVersion": {
            "type": "string",
            "description": "The version id of the Patient resource to ensure updated data is not overridden."
          },
          "status": {
            "type": "string",
            "description": "The status of the Observation, required by FHIR and always set to final by default."
          },
          "technician": {
            "type": "string",
            "description": "The technician name."
          },
          "technicianReference": {
            "$ref": "#/components/schemas/uuid",
            "description": "The technician reference (Practitioner/guid)."
          },
          "timeStamp": {
            "type": "string",
            "description": "The time stamp when the Observation was created or last updated."
          },
          "type": {
            "type": "string",
            "description": "The code representing the type of Observation."
          }
        },
        "description": "The pre Refraction."
      },
      "preferredLensConstants": {
        "type": "object",
        "properties": {
          "lensFamilyId": {
            "type": "string",
            "description": "The lens family id."
          },
          "manufacturer": {
            "type": "string",
            "description": "The lens manufacturer."
          },
          "lensFamilyName": {
            "type": "string",
            "description": "The lens family name."
          },
          "measurementType": {
            "type": "string",
            "description": "The measurement type.",
            "enum": [
              "Optical",
              "Ultrasound"
            ]
          },
          "procedureType": {
            "type": "string",
            "description": "The procedure type.",
            "enum": [
              "Std Phaco",
              "Femto"
            ]
          },
          "constants": {
            "minItems": 0,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/constants"
            }
          }
        },
        "description": "The preferred lens constants for the optimized lens families list."
      },
      "preferredLenses": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "The description of this lens family."
          },
          "lensType": {
            "type": "string",
            "description": "The type of this lens family (Aspheric | Monofocal | Monofocal | Multifocal | Toric).",
            "example": "Aspheric"
          },
          "manufacturer": {
            "type": "string",
            "description": "The manufacturer of this lens family (Alcon | AMO | Millennium | Rayner | Staar).",
            "example": "Alcon"
          },
          "name": {
            "type": "string",
            "description": "The name of this lens family (Alcon ReSTOR MultiFocal | Toric | Sv250T0 | ZCUx).",
            "example": "Alcon ReSTOR MultiFocal"
          },
          "familyId": {
            "type": "string",
            "description": "The family id."
          },
          "id": {
            "type": "string",
            "description": "The unique identifier of this lens family (1 - 999).",
            "example": "1"
          },
          "isFreeLens": {
            "type": "boolean",
            "description": "The free lens flag."
          },
          "procedureType": {
            "type": "string",
            "description": "The procedure type."
          },
          "checked": {
            "type": "boolean",
            "description": "The checked flag."
          },
          "lensSeq": {
            "type": "string",
            "description": "The lens SEQ."
          },
          "lenses": {
            "minItems": 0,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/lenses"
            }
          },
          "familyType": {
            "type": "string",
            "description": "The type of this lens family.",
            "example": "Non Toric",
            "enum": [
              "Non Toric",
              "Toric"
            ]
          },
          "chamberTypeId": {
            "type": "integer",
            "description": "The unique identifier of the chamber in which a lens in this family.",
            "format": "int32"
          },
          "chamberType": {
            "type": "string",
            "description": "The chamber in which a lens in this family.",
            "example": "Posterior",
            "enum": [
              "Anterior",
              "Posterior"
            ]
          },
          "lensTypeId": {
            "type": "integer",
            "description": "The unique identifier of the type of this lens family.",
            "format": "int32"
          },
          "manufacturerId": {
            "type": "integer",
            "description": "The unique identifier of the manufacturer of this lens family.",
            "format": "int32"
          }
        },
        "description": "The preferred lens list."
      },
      "primaryIncision": {
        "type": "object",
        "properties": {
          "arcDiameter": {
            "type": "string",
            "description": "The incision diameter, in units of millimeters."
          },
          "energy": {
            "type": "string",
            "description": "The laser pulse energy, in units of microjoules."
          },
          "incisionPosition": {
            "type": "string",
            "description": "The position of the incision, in units of degrees."
          },
          "incisionWidth": {
            "type": "string",
            "description": "The width of the incision, in units of millimeters."
          },
          "imageId": {
            "type": "string",
            "description": "The unique identifier of the associated image."
          },
          "layerSeparation": {
            "type": "string",
            "description": "The distance between laser pulse targets along the z-axis, in units of micrometers."
          },
          "numberOfPlanes": {
            "type": "string",
            "description": "The number of planes in the incision pattern."
          },
          "periphCornealThickness": {
            "type": "string",
            "description": "The thickness of the cornea on the periphery, in units of millimeters."
          },
          "plane1PercentPostDepth": {
            "type": "string",
            "description": "The depth of the incision relative to corneal thickness in the first plane, in units of percent."
          },
          "plane1SideCutAngle": {
            "type": "string",
            "description": "The flap side cut angle in the first plane, in units of degrees."
          },
          "plane2CordLength": {
            "type": "string",
            "description": "The cord length in the second plane, in units of millimeters."
          },
          "plane2PercentPostDepth": {
            "type": "string",
            "description": "The depth of the incision relative to corneal thickness in the second plane, in units of percent."
          },
          "plane2SideCutAngle": {
            "type": "string",
            "description": "The flap side cut angle in the second plane, in units of degrees."
          },
          "plane3PercentPostDepth": {
            "type": "string",
            "description": "The depth of the incision relative to corneal thickness in the third plane, in units of percent."
          },
          "plane3SideCutAngle": {
            "type": "string",
            "description": "The flap side cut angle in the third plane, in units of degrees."
          },
          "spotSeparation": {
            "type": "string",
            "description": "The distance between laser pulse targets in the x-y plane, in units of micrometers."
          },
          "trapezoidOffset": {
            "type": "string",
            "description": "The trapezoid offset, in units of millimeters."
          },
          "trapezoidOffsetType": {
            "type": "string",
            "description": "The type of trapezoid offset, EXTERNAL | INTERNAL."
          },
          "zDelta": {
            "type": "string",
            "description": "The delta z of the incision, in units of millimeters."
          }
        },
        "description": "The primary incision parameters."
      },
      "procedureRequests": {
        "type": "object",
        "properties": {
          "caseId": {
            "$ref": "#/components/schemas/uuid",
            "description": "The unique identifier of the associate case."
          },
          "caseReference": {
            "type": "string",
            "description": "The reference to the case."
          },
          "deviceCode": {
            "$ref": "#/components/schemas/deviceCode"
          },
          "deviceName": {
            "type": "string",
            "description": "The code of the device name."
          },
          "deviceReference": {
            "type": "string",
            "description": "The reference to the device name."
          },
          "eye": {
            "type": "string",
            "description": "The eye the procedure request is for."
          },
          "facility": {
            "type": "string",
            "description": "The facility name."
          },
          "facilityReference": {
            "type": "string",
            "description": "The reference to the facility."
          },
          "guid": {
            "type": "string",
            "description": "The unique identifier."
          },
          "identifier": {
            "type": "string",
            "description": "The identifier."
          },
          "lastUpdated": {
            "type": "string",
            "description": "The time stamp indicating when the object was last updated."
          },
          "orderType": {
            "type": "string",
            "description": "The order type of the procedure request as defined by the ProcedureRequest.code."
          },
          "patientReference": {
            "type": "string",
            "description": "The reference to the patient."
          },
          "scheduledDate": {
            "type": "string",
            "description": "The scheduled date of the procedure request."
          },
          "status": {
            "type": "string",
            "description": "The status of the procedure request."
          },
          "surgeon": {
            "type": "string",
            "description": "The surgeon name."
          },
          "surgeonReference": {
            "type": "string",
            "description": "The reference to the surgeon."
          },
          "versionId": {
            "type": "string",
            "description": "The version id."
          }
        },
        "description": "The procedure requests associated with a case list."
      },
      "refraction": {
        "type": "object",
        "properties": {
          "odPostRefraction": {
            "$ref": "#/components/schemas/odPostRefraction"
          },
          "odPreRefraction": {
            "$ref": "#/components/schemas/odPreRefraction"
          },
          "osPostRefraction": {
            "$ref": "#/components/schemas/osPostRefraction"
          },
          "osPreRefraction": {
            "$ref": "#/components/schemas/osPreRefraction"
          }
        },
        "description": "The patient pre- and post-operative left and right eye refraction data."
      },
      "refractionVisualAcuityAssessments": {
        "type": "object",
        "properties": {
          "date": {
            "type": "string",
            "format": "date",
            "description": "The date of refraction visualacuity assessment (mm/dd/yyyy).",
            "example": "01/01/2024"
          },
          "refractions": {
            "minItems": 0,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/refractions"
            }
          },
          "assessments": {
            "minItems": 0,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/assessments"
            }
          },
          "visualAcuity": {
            "$ref": "#/components/schemas/visualAcuity"
          },
          "response": {
            "$ref": "#/components/schemas/ExceptionResponseBody"
          },
          "caseId": {
            "$ref": "#/components/schemas/uuid",
            "description": "The case id (CarePlan/guid)."
          },
          "eye": {
            "type": "string",
            "description": "The eye."
          },
          "fromGuid": {
            "$ref": "#/components/schemas/uuid",
            "description": "The guid the resource was created from."
          },
          "guid": {
            "$ref": "#/components/schemas/uuid",
            "description": "The guid."
          },
          "lastUpdated": {
            "type": "string",
            "description": "The time the resource was last updated."
          },
          "parentMeasurement": {
            "$ref": "#/components/schemas/uuid",
            "description": "The parent measurement (Observation/guid)."
          },
          "patientReference": {
            "$ref": "#/components/schemas/uuid",
            "description": "The patient reference (Patient/guid)."
          },
          "patientVersion": {
            "type": "string",
            "description": "The version id of the Patient resource to ensure updated data is not overridden."
          },
          "status": {
            "type": "string",
            "description": "The status of the Observation, required by FHIR and always set to final by default."
          },
          "technician": {
            "type": "string",
            "description": "The technician name."
          },
          "technicianReference": {
            "$ref": "#/components/schemas/uuid",
            "description": "The technician reference (Practitioner/guid)."
          },
          "timeStamp": {
            "type": "string",
            "description": "The time stamp when the Observation was created or last updated."
          },
          "type": {
            "type": "string",
            "description": "The code representing the type of Observation."
          }
        },
        "description": "The refaction visualAcuity assessments list."
      },
      "refractions": {
        "type": "object",
        "properties": {
          "axis": {
            "type": "string"
          },
          "cyl": {
            "type": "string"
          },
          "seq": {
            "type": "string"
          },
          "sph": {
            "type": "string"
          },
          "method": {
            "type": "string"
          },
          "intAdd": {
            "type": "string"
          },
          "nearAdd": {
            "type": "string"
          },
          "response": {
            "$ref": "#/components/schemas/ExceptionResponseBody"
          },
          "caseId": {
            "$ref": "#/components/schemas/uuid",
            "description": "The case id (CarePlan/guid)."
          },
          "eye": {
            "type": "string",
            "description": "The eye."
          },
          "fromGuid": {
            "$ref": "#/components/schemas/uuid",
            "description": "The guid the resource was created from."
          },
          "guid": {
            "$ref": "#/components/schemas/uuid",
            "description": "The guid."
          },
          "lastUpdated": {
            "type": "string",
            "description": "The time the resource was last updated."
          },
          "parentMeasurement": {
            "$ref": "#/components/schemas/uuid",
            "description": "The parent measurement (Observation/guid)."
          },
          "patientReference": {
            "$ref": "#/components/schemas/uuid",
            "description": "The patient reference (Patient/guid)."
          },
          "patientVersion": {
            "type": "string",
            "description": "The version id of the Patient resource to ensure updated data is not overridden."
          },
          "status": {
            "type": "string",
            "description": "The status of the Observation, required by FHIR and always set to final by default."
          },
          "technician": {
            "type": "string",
            "description": "The technician name."
          },
          "technicianReference": {
            "$ref": "#/components/schemas/uuid",
            "description": "The technician reference (Practitioner/guid)."
          },
          "timeStamp": {
            "type": "string",
            "description": "The time stamp when the Observation was created or last updated."
          },
          "type": {
            "type": "string",
            "description": "The code representing the type of Observation."
          }
        },
        "description": "The refractions list."
      },
      "refractiveSurgeries": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of refractive surgery."
          },
          "date": {
            "type": "string",
            "format": "date",
            "description": "The date of refractive surgery (mm/dd/yyyy)."
          },
          "timeStamp": {
            "type": "string",
            "description": "The timeStamp of refractive surgery."
          }
        },
        "description": "The refractive surgeries list."
      },
      "registration": {
        "type": "object",
        "properties": {
          "imageId": {
            "type": "string",
            "description": "The unique identifier of the associated image."
          },
          "limbusCenterX": {
            "type": "string",
            "description": "The x-position of the center of the limbus, in units of pixels."
          },
          "limbusCenterY": {
            "type": "string",
            "description": "The y-position of the center of the limbus, in units of pixels."
          },
          "limbusQuality": {
            "type": "string",
            "description": "The quality of the limbus measurement."
          },
          "limbusRotation": {
            "type": "string",
            "description": "The rotation of the limbus, in units of degrees."
          },
          "limbusSizeRMajor": {
            "type": "string",
            "description": "The semi-major axis of the limbus, in units of pixels."
          },
          "limbusSizeRMinor": {
            "type": "string",
            "description": "The semi-minor axis of the limbus, in units of pixels."
          },
          "pupilCenterX": {
            "type": "string",
            "description": "The x-position of the center of the pupil, in units of pixels."
          },
          "pupilCenterY": {
            "type": "string",
            "description": "The y-position of the center of the pupil, in units of pixels."
          },
          "pupilQuality": {
            "type": "string",
            "description": "The quality of the pupil measurement."
          },
          "pupilRotation": {
            "type": "string",
            "description": "The rotation of the pupil, in units of degrees."
          },
          "pupilSizeRMajor": {
            "type": "string",
            "description": "The semi-major axis of the pupil, in units of pixels."
          },
          "pupilSizeRMinor": {
            "type": "string",
            "description": "The semi-minor axis of the pupil, in units of pixels."
          },
          "rotation": {
            "type": "string",
            "description": "The rotation, in units of degrees."
          }
        },
        "description": "The registration parameters."
      },
      "rightOd": {
        "type": "object",
        "properties": {
          "dominantEye": {
            "type": "boolean",
            "description": "The dominant eye flag."
          },
          "ocularDisease": {
            "type": "string",
            "description": "The ocular disease which is deprecated field and it is here for backward compatibility and also support for UI."
          },
          "ocularDiseases": {
            "minItems": 0,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "postRefractive": {
            "type": "string",
            "description": "The post-operative refractive data."
          },
          "slitLamp": {
            "type": "string",
            "description": "The slit lamp."
          },
          "status": {
            "type": "string",
            "description": "The status."
          },
          "cataractGrade": {
            "type": "string",
            "description": "The cataract grade."
          },
          "cataractType": {
            "minItems": 0,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "vitreousBody": {
            "type": "string",
            "description": "The vitreous body."
          },
          "contactLensType": {
            "type": "string",
            "description": "The contact lens type."
          },
          "contactLensDuration": {
            "type": "string",
            "description": "The contact lens duration."
          },
          "contactLensDurationUnits": {
            "type": "string",
            "description": "The contact lens duration units."
          },
          "refractiveSurgeries": {
            "minItems": 0,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/refractiveSurgeries"
            }
          },
          "lensSurgeries": {
            "minItems": 0,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/lensSurgeries"
            }
          },
          "otherSurgeries": {
            "minItems": 0,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/otherSurgeries"
            }
          },
          "refractionVisualAcuityAssessments": {
            "minItems": 0,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/refractionVisualAcuityAssessments"
            }
          },
          "monoVision": {
            "type": "boolean",
            "description": "The mono vision."
          }
        },
        "description": "The right (OD) data."
      },
      "secondaryIncision": {
        "type": "object",
        "properties": {
          "arcDiameter": {
            "type": "string",
            "description": "The diameter of the incisions, in units of millimeters."
          },
          "energy": {
            "type": "string",
            "description": "The laser pulse energy, in units of microjoules."
          },
          "imageId": {
            "type": "string",
            "description": "The unique identifier of the associated image."
          },
          "incisionPosition": {
            "minItems": 0,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "incisionWidth": {
            "minItems": 0,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "layerSeparation": {
            "type": "string",
            "description": "The distance between laser pulse targets along the z-axis, in units of micrometers."
          },
          "percentagePostDepth": {
            "type": "string",
            "description": "The depth of the incisions relative to corneal thickness, in units of percent."
          },
          "periphCornealThickness": {
            "type": "string",
            "description": "The thickness of the cornea on the periphery, in units of millimeters."
          },
          "sideCutAngle": {
            "type": "string",
            "description": "The flap side cut angle, in units of degrees."
          },
          "spotSeparation": {
            "type": "string",
            "description": "The distance between laser pulse targets in the x-y plane, in units of micrometers."
          },
          "trapezoidOffset": {
            "type": "string",
            "description": "The trapezoid offset, in units of millimeters."
          },
          "trapezoidOffsetType": {
            "type": "string",
            "description": "The type of trapezoid offset, EXTERNAL | INTERNAL."
          },
          "zDelta": {
            "type": "string",
            "description": "The delta z of the incisions in units of millimeters."
          }
        },
        "description": "The secondary incision parameters."
      },
      "siaPreferences": {
        "type": "object",
        "properties": {
          "smallIncision": {
            "$ref": "#/components/schemas/smallIncision"
          },
          "mediumIncision": {
            "$ref": "#/components/schemas/mediumIncision"
          },
          "largeIncision": {
            "$ref": "#/components/schemas/largeIncision"
          },
          "primaryIncisionPosition": {
            "type": "string",
            "description": "The primary incision position."
          },
          "customSmallIncision": {
            "$ref": "#/components/schemas/customSmallIncision"
          },
          "customMediumIncision": {
            "$ref": "#/components/schemas/customMediumIncision"
          },
          "customLargeIncision": {
            "$ref": "#/components/schemas/customLargeIncision"
          },
          "updationInformation": {
            "$ref": "#/components/schemas/updationInformation"
          }
        },
        "description": "The SIA preferences."
      },
      "smallIncision": {
        "type": "object",
        "properties": {
          "temporalSia": {
            "type": "string",
            "description": "The temporal SIA."
          },
          "superiorSia": {
            "type": "string",
            "description": "The superior SIA."
          },
          "customSia": {
            "type": "string",
            "description": "The custom SIA."
          },
          "selectedAsDefault": {
            "type": "boolean",
            "description": "The selected as default flag."
          },
          "isCustom": {
            "type": "boolean",
            "description": "The is custom flag."
          },
          "currentSiaStatus": {
            "type": "string",
            "description": "The current SIA status."
          },
          "lastSiaUpdatedStatus": {
            "type": "string",
            "description": "The last SIA updated status."
          }
        },
        "description": "The small incision."
      },
      "surgeonAllLensAConstants": {
        "type": "object",
        "properties": {
          "surgeonLensAConstantsList": {
            "minItems": 0,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/surgeonLensAConstantsList"
            }
          }
        },
        "description": "The entries or entry of the requested lens A-Constants."
      },
      "surgeonDefaultPreferences": {
        "type": "object",
        "properties": {
          "measurements": {
            "$ref": "#/components/schemas/measurements"
          },
          "planning": {
            "$ref": "#/components/schemas/planning"
          },
          "surgery": {
            "minItems": 0,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/surgery"
            }
          },
          "oraCartSurgeryCylinderNotation": {
            "type": "string",
            "description": "The ORA cart surgery cylinder notation (Plus | Minus).",
            "example": "Plus"
          },
          "surgeryCenters": {
            "minItems": 0,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/surgeryCenters"
            }
          }
        },
        "description": "The surgeon default preferences."
      },
      "surgeonLensAConstantsList": {
        "type": "object",
        "properties": {
          "lensFamilyId": {
            "type": "string",
            "description": "The lens family identifier."
          },
          "srgAConstantOptical": {
            "type": "string",
            "description": "The surgeon specified aconstant for a specific lens in optical mode and SRK/T formula. This field is deprecated in CP-4180. It is here for backward compatibility[To handle data that has value still here]. New location is in surgeonLensConstantsByFormula field of this class with SRK/T (A-Const) name."
          },
          "srgAConstantUltrasound": {
            "type": "string",
            "description": "The surgeon specified aconstant for a specific lens in ultrasound mode and SRK/T formula. This field is deprecated in CP-4180. It is here for backward compatibility[To handle data that has value still here]. New location is in surgeonLensConstantsByFormula field of this class with SRK/T (A-Const) name."
          },
          "srgAConstantOpticalTimeStamp": {
            "type": "string",
            "description": "The timeStamp when surgeon specified aconstant for a specific lens in optical mode and SRK/T formula. This field is deprecated in CP-4180. It is here for backward compatibility[To handle data that has value still here]. New location is in surgeonLensConstantsByFormula field of this class with SRK/T (A-Const) name.",
            "format": "yyyy-MM-ddThh:mm:ss[Z|(+|-)hh:mm]"
          },
          "srgAConstantUltrasoundTimeStamp": {
            "type": "string",
            "description": "The timeStamp surgeon specified aconstant for a specific lens in ultrasound mode and SRK/T formula. This field is deprecated in CP-4180. It is here for backward compatibility[To handle data that has value still here]. New location is in surgeonLensConstantsByFormula field of this class with SRK/T (A-Const) name.",
            "format": "yyyy-MM-ddThh:mm:ss[Z|(+|-)hh:mm]"
          },
          "surgeonLensConstantsByFormula": {
            "minItems": 0,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/surgeonLensConstantsByFormula"
            }
          }
        },
        "description": "The surgeon specified lens A-Constants list."
      },
      "surgeonLensConstantsByFormula": {
        "type": "object",
        "properties": {
          "formula": {
            "type": "string",
            "description": "The formula of this surgeon specified constant (Barrett, Haigis, HofferQ, Holladay1, Holladay2, HolladayR, SRKT).",
            "example": "Barrett"
          },
          "name": {
            "type": "string",
            "description": "The name of this surgeon specified constant (LF, A0, A1, A2, ACD, SF, A-Const).",
            "example": "LF"
          },
          "srgAConstantOptical": {
            "type": "string",
            "description": "The surgeon specified constant for a specific lens in optical mode."
          },
          "srgAConstantOpticalTimeStamp": {
            "type": "string",
            "description": "The timeStamp when surgeon specified constant for a specific lens in optical mode (yyyy-MM-ddThh:mm:ss[Z|(+|-)hh:mm]).",
            "format": "date-time"
          },
          "srgAConstantUltrasound": {
            "type": "string",
            "description": "The surgeon specified constant for a specific lens in ultrasound mode."
          },
          "srgAConstantUltrasoundTimeStamp": {
            "type": "string",
            "description": "The timeStamp when surgeon specified constant for a specific lens in ultrasound mode (yyyy-MM-ddThh:mm:ss[Z|(+|-)hh:mm]).",
            "format": "date-time"
          }
        },
        "description": "The surgeon lens constants by formula list."
      },
      "surgeonPreferences": {
        "type": "object",
        "properties": {
          "updateIolCalculationTimeStamp": {
            "type": "boolean",
            "description": "The flag to track whether iol calculation time stamp needs to update or not."
          },
          "surgeonDefaultPreferences": {
            "$ref": "#/components/schemas/surgeonDefaultPreferences"
          },
          "preferredLensConstants": {
            "minItems": 0,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/preferredLensConstants"
            }
          },
          "preferredLenses": {
            "minItems": 0,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/preferredLenses"
            }
          },
          "preferredLensOraIds": {
            "minItems": 0,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "incisionPreferences": {
            "minItems": 0,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/incisionPreferences"
            }
          },
          "treatmentPreferences": {
            "$ref": "#/components/schemas/treatmentPreferences"
          },
          "siaPreferences": {
            "$ref": "#/components/schemas/siaPreferences"
          },
          "arcuates": {
            "$ref": "#/components/schemas/arcuates"
          },
          "criTemplate": {
            "$ref": "#/components/schemas/criTemplate"
          },
          "freeUserTrained": {
            "type": "boolean",
            "description": "The free user has been trained."
          },
          "doNotShowWelcomeScreen": {
            "type": "boolean",
            "description": "The do not show the welcome screen."
          },
          "hideSurgeonDefaultsModal": {
            "type": "boolean",
            "description": "The hide surgeon defaults model."
          },
          "lastUpdatedPractitionerId": {
            "type": "string",
            "description": "The the id of the last practitioner to update the surgeon preferences, which matches the UI field name."
          },
          "lastUpdatedTimestamp": {
            "type": "string",
            "format": "date-time",
            "description": "The time stamp indicating when the surgeon preferences were last updated by the UI, used by the UI (yyyy-MM-dd'T'HH:mm:ss+00:00).",
          },
          "iolCalculationTimeStamp": {
            "type": "string",
            "description": "The time stamp indicating when the surgeon preferences were last updated for iolCalculation fields (yyyy-MM-dd'T'HH:mm:ss+00:00)."
          },
          "lastUpdated": {
            "type": "string",
            "description": "The time stamp indicating when the surgeon preferences were last updated in the surgical plan snapshot, needed for reporting."
          },
          "surgicalPlanReference": {
            "type": "string",
            "description": "The reference to the surgical plan, needed for reporting."
          }
        },
        "description": "The surgeon preferences data."
      },
      "surgery": {
        "type": "object",
        "properties": {
          "extendedOrientation": {
            "type": "string",
            "description": "The extended orientation."
          },
          "eye": {
            "type": "string",
            "description": "The eye."
          },
          "orientation": {
            "type": "string",
            "description": "The orientation."
          },
          "rotateEyeGraphicBasedOnOrientation": {
            "type": "string",
            "description": "The rotate eye graphic based on orientation."
          }
        },
        "description": "The ORA cart surgery orientations list."
      },
      "surgeryCenters": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the surgery center."
          },
          "id": {
            "type": "string",
            "description": "The id of the surgery center."
          },
          "oraSyncEnabled": {
            "type": "boolean",
            "description": "The ora sync enabled flag of the surgery center."
          }
        },
        "description": "The surgery centers list."
      },
      "surgicalPlans": {
        "type": "object",
        "properties": {
          "additionalLenses": {
            "type": "object",
            "description": "The additional lenses used when saving a plan, as defined and managed by the front end."
          },
          "approvedStatusChangedByUserId": {
            "type": "string",
            "description": "The id of the user who changed status of the surgical plan to approved."
          },
          "approvedStatusChangedByUserName": {
            "type": "string",
            "description": "The name of the user who changed status of the surgical plan to approved."
          },
          "approvedStatusChangedOnTimeStamp": {
            "type": "string",
            "description": "The timestamp when the status of the surgical plan changed to approved."
          },
          "carePlanDetails": {
            "$ref": "#/components/schemas/carePlanDetails"
          },
          "caseDetailsReference": {
            "type": "string",
            "description": "The reference to the case details reference needed for reporting."
          },
          "caseId": {
            "$ref": "#/components/schemas/uuid",
            "description": "The id of the case the surgical plan belongs to, used in reporting."
          },
          "completedDate": {
            "type": "string",
            "description": "The date that the surgical plan was marked completed."
          },
          "devices": {
            "minItems": 0,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "elevenBoxSetsExtension": {
            "type": "object",
            "description": "The eleven box sets extension for the plan, as defined and managed by the front end."
          },
          "facility": {
            "type": "string",
            "description": "The name of the facility the plan is being sent to."
          },
          "facilityReference": {
            "type": "string",
            "description": "The reference to the facility the plan is being sent to."
          },
          "imported": {
            "type": "boolean",
            "description": "The imported plan flag."
          },
          "mfgAconstantIgnoreTimeStamp": {
            "type": "string",
            "description": "The ignore timeStamp for manufacturer A-Constant."
          },
          "planNotifications": {
            "minItems": 0,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "planStatusSelection": {
            "type": "string",
            "description": "The status of the plan (Approved and Scheduled, Scheduled Primary, etc).",
            "example": "Approved and Scheduled"
          },
          "phakicMeasurementSet": {
            "$ref": "#/components/schemas/phakicMeasurementSet"
          },
          "surgeonName": {
            "type": "string",
            "description": "The name of the surgeon assigned to the case, retrieved from the Person resource."
          },
          "surgeonPreferences": {
            "$ref": "#/components/schemas/surgeonPreferences"
          },
          "surgeonReference": {
            "type": "string",
            "description": "The Practitioner reference of the surgeon assigned to the case."
          },
          "surgeryDate": {
            "type": "string",
            "description": "The surgery date of the case."
          },
          "procedureRequestReferences": {
            "minItems": 0,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "astigmatismFix": {
            "$ref": "#/components/schemas/astigmatismFix"
          },
          "unapprovedStatusChangedByUserId": {
            "type": "string",
            "description": "The id of the user who changed status of the surgical plan to unapproved."
          },
          "unapprovedStatusChangedByUserName": {
            "type": "string",
            "description": "The name of the user who changed status of the surgical plan to unapproved."
          },
          "unapprovedStatusChangedOnTimeStamp": {
            "type": "string",
            "description": "The timestamp when the status of the surgical plan changed to unapproved."
          },
          "additionalProfileDetails": {
            "$ref": "#/components/schemas/additionalProfileDetails"
          },
          "consultation": {
            "type": "object",
            "description": "The object, defined and managed by the front end, that contains the consultation for a patient."
          },
          "eye": {
            "type": "string",
            "description": "The eye."
          },
          "eyeAssessment": {
            "type": "object",
            "description": "The object, defined and managed by the front end, that contains the eye assessment for a patient within a case."
          },
          "guid": {
            "$ref": "#/components/schemas/uuid",
            "description": "The guid."
          },
          "lastUpdated": {
            "type": "string",
            "description": "The time stamp indicating when the object was last updated."
          },
          "measurementMasterSet": {
            "$ref": "#/components/schemas/measurementMasterSet"
          },
          "surgeryType": {
            "type": "string",
            "description": "The surgery type of the case."
          },
          "tags": {
            "minItems": 0,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "description": "The surgical plans belonging to a case list."
      },
      "totalAspirationTime": {
        "type": "object",
        "properties": {
          "unit": {
            "type": "string",
            "description": "The unit of measurement."
          },
          "value": {
            "type": "string",
            "description": "The value of measurement."
          }
        },
        "description": "The total aspiration time."
      },
      "totalLongitudinalPowerOnTime": {
        "type": "object",
        "properties": {
          "unit": {
            "type": "string",
            "description": "The unit of measurement."
          },
          "value": {
            "type": "string",
            "description": "The value of measurement."
          }
        },
        "description": "The total longitudinal power on time."
      },
      "totalTorsionalAmplitudeOnTime": {
        "type": "object",
        "properties": {
          "unit": {
            "type": "string",
            "description": "The unit of measurement."
          },
          "value": {
            "type": "string",
            "description": "The value of measurement."
          }
        },
        "description": "The total torsional amplitude on time."
      },
      "treatmentPreferences": {
        "type": "object",
        "properties": {
          "arcIncisionDepth": {
            "type": "string",
            "description": "The arc incision depth."
          },
          "arcIncisionDiameter": {
            "type": "string",
            "description": "The arc incision diameter."
          },
          "arcConfiguration": {
            "type": "string",
            "description": "The arc configuration."
          },
          "iolArcBlendFactorTable": {
            "minItems": 0,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iolArcBlendFactorTable"
            }
          }
        },
        "description": "The treatment preferences."
      },
      "updationInformation": {
        "type": "object",
        "properties": {
          "updateTime": {
            "type": "string",
            "description": "The update time."
          },
          "userName": {
            "type": "string",
            "description": "The user name."
          }
        },
        "description": "The update information."
      },
      "usTotalTime": {
        "type": "object",
        "properties": {
          "unit": {
            "type": "string",
            "description": "The unit of measurement."
          },
          "value": {
            "type": "string",
            "description": "The value of measurement."
          }
        },
        "description": "The us total time."
      },
      "visualAcuities": {
        "type": "object",
        "properties": {
          "bcnva": {
            "type": "string"
          },
          "bcva": {
            "type": "string"
          },
          "ucnva": {
            "type": "string"
          },
          "ucva": {
            "type": "string"
          },
          "eye": {
            "type": "string"
          },
          "uciva": {
            "type": "string"
          },
          "bciva": {
            "type": "string"
          },
          "visualAcuityUnit": {
            "type": "string"
          },
          "caseVersion": {
            "type": "string"
          },
          "response": {
            "$ref": "#/components/schemas/ExceptionResponseBody"
          },
          "caseId": {
            "$ref": "#/components/schemas/uuid",
            "description": "The case id (CarePlan/guid)."
          },
          "fromGuid": {
            "$ref": "#/components/schemas/uuid",
            "description": "The guid the resource was created from."
          },
          "guid": {
            "$ref": "#/components/schemas/uuid",
            "description": "The guid."
          },
          "lastUpdated": {
            "type": "string",
            "description": "The time the resource was last updated."
          },
          "parentMeasurement": {
            "$ref": "#/components/schemas/uuid",
            "description": "The parent measurement (Observation/guid)."
          },
          "patientReference": {
            "$ref": "#/components/schemas/uuid",
            "description": "The patient reference (Patient/guid)."
          },
          "patientVersion": {
            "type": "string",
            "description": "The version id of the Patient resource to ensure updated data is not overridden."
          },
          "status": {
            "type": "string",
            "description": "The status of the Observation, required by FHIR and always set to final by default."
          },
          "technician": {
            "type": "string",
            "description": "The technician name."
          },
          "technicianReference": {
            "$ref": "#/components/schemas/uuid",
            "description": "The technician reference (Practitioner/guid)."
          },
          "timeStamp": {
            "type": "string",
            "description": "The time stamp when the Observation was created or last updated."
          },
          "type": {
            "type": "string",
            "description": "The code representing the type of Observation."
          }
        },
        "description": "The visual acuity measurements list."
      },
      "visualAcuity": {
        "type": "object",
        "properties": {
          "bcnva": {
            "type": "string"
          },
          "bcva": {
            "type": "string"
          },
          "ucnva": {
            "type": "string"
          },
          "ucva": {
            "type": "string"
          },
          "eye": {
            "type": "string"
          },
          "uciva": {
            "type": "string"
          },
          "bciva": {
            "type": "string"
          },
          "visualAcuityUnit": {
            "type": "string"
          },
          "caseVersion": {
            "type": "string"
          },
          "response": {
            "$ref": "#/components/schemas/ExceptionResponseBody"
          },
          "caseId": {
            "$ref": "#/components/schemas/uuid",
            "description": "The case id (CarePlan/guid)."
          },
          "fromGuid": {
            "$ref": "#/components/schemas/uuid",
            "description": "The guid the resource was created from."
          },
          "guid": {
            "$ref": "#/components/schemas/uuid",
            "description": "The guid."
          },
          "lastUpdated": {
            "type": "string",
            "description": "The time the resource was last updated."
          },
          "parentMeasurement": {
            "$ref": "#/components/schemas/uuid",
            "description": "The parent measurement (Observation/guid)."
          },
          "patientReference": {
            "$ref": "#/components/schemas/uuid",
            "description": "The patient reference (Patient/guid)."
          },
          "patientVersion": {
            "type": "string",
            "description": "The version id of the Patient resource to ensure updated data is not overridden."
          },
          "status": {
            "type": "string",
            "description": "The status of the Observation, required by FHIR and always set to final by default."
          },
          "technician": {
            "type": "string",
            "description": "The technician name."
          },
          "technicianReference": {
            "$ref": "#/components/schemas/uuid",
            "description": "The technician reference (Practitioner/guid)."
          },
          "timeStamp": {
            "type": "string",
            "description": "The time stamp when the Observation was created or last updated."
          },
          "type": {
            "type": "string",
            "description": "The code representing the type of Observation."
          }
        },
        "description": "The visual acuity."
      },
      "PatientAndSummaryCase": {
        "type": "object",
        "properties": {
          "patient": {
            "$ref": "#/components/schemas/patient"
          },
          "procedureRequests": {
            "minItems": 0,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/procedureRequests"
            }
          },
          "informationMessage": {
            "$ref": "#/components/schemas/informationMessage"
          },
          "summaryCase": {
            "$ref": "#/components/schemas/summaryCase"
          },
          "surgicalPlanTransform": {
            "$ref": "#/components/schemas/surgicalPlanTransform"
          }
        }
      },
      "caseDetails": {
        "type": "object",
        "properties": {
          "author": {
            "type": "string",
            "description": "The reference to the Practitioner in CDR who initiated the case."
          },
          "carePlanResourceStatus": {
            "type": "string",
            "description": "The status of the actual case (active, cancelled, completed). This reflects what would have been the CarePlan.status value in a CDR resource."
          },
          "careTeamReferences": {
            "minItems": 0,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "careTeams": {
            "minItems": 0,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/careTeams"
            }
          },
          "caseName": {
            "type": "string",
            "description": "The name of the case."
          },
          "completedDate": {
            "type": "string",
            "description": "The date that the case was marked completed."
          },
          "excludeFromOptimizations": {
            "type": "boolean",
            "description": "The exclude from optimizations value for the case flag."
          },
          "moreSurgicalPlans": {
            "type": "string",
            "description": "The number of surgical plans not displayed in the patient list."
          },
          "notes": {
            "minItems": 0,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/notes"
            }
          },
          "procedureRequests": {
            "minItems": 0,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/procedureRequests"
            }
          },
          "status": {
            "type": "string",
            "description": "The status of the case stages."
          },
          "summaryCaseReference": {
            "type": "string",
            "description": "The summary case reference needed for reporting."
          },
          "surgeonName": {
            "type": "string",
            "description": "The name of the surgeon assigned to the case, retrieved from the Person resource."
          },
          "surgeonReference": {
            "type": "string",
            "description": "The Practitioner reference of the surgeon assigned to the case."
          },
          "surgeryDate": {
            "type": "string",
            "description": "The surgery date."
          },
          "surgeryLocation": {
            "type": "string",
            "description": "The surgery location."
          },
          "surgicalPlans": {
            "minItems": 0,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/surgicalPlans"
            }
          },
          "surgicalPlanGuids": {
            "minItems": 0,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "timeOutCompletedDateTime": {
            "type": "string",
            "description": "The time out completed date time."
          },
          "defaultPlanningMeasurementOD": {
            "$ref": "#/components/schemas/defaultPlanningMeasurementOD"
          },
          "defaultPlanningMeasurementOS": {
            "$ref": "#/components/schemas/defaultPlanningMeasurementOS"
          },
          "additionalProfileDetails": {
            "$ref": "#/components/schemas/additionalProfileDetails"
          },
          "consultation": {
            "type": "object",
            "description": "The object, defined and managed by the front end, that contains the consultation for a patient."
          },
          "eye": {
            "type": "string",
            "description": "The eye."
          },
          "eyeAssessment": {
            "type": "object",
            "description": "The object, defined and managed by the front end, that contains the eye assessment for a patient within a case."
          },
          "guid": {
            "$ref": "#/components/schemas/uuid",
            "description": "The guid."
          },
          "lastUpdated": {
            "type": "string",
            "description": "The time stamp indicating when the object was last updated."
          },
          "measurementMasterSet": {
            "$ref": "#/components/schemas/measurementMasterSet"
          },
          "surgeryType": {
            "type": "string",
            "description": "The surgery type of the case."
          },
          "tags": {
            "minItems": 0,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "description": "The superset of data for all cases for a patient within a particular application list."
      },
      "mrnModel": {
        "type": "object",
        "properties": {
          "mrnCodingCode": {
            "type": "string",
            "description": "The MRN coding code."
          },
          "mrnCodingDisplay": {
            "type": "string",
            "description": "The MRN coding display value."
          },
          "mrnCodingSystem": {
            "type": "string",
            "description": "The MRN coding system."
          },
          "mrnIdentifierUse": {
            "type": "string",
            "description": "The MRN identifier use."
          },
          "patientMrnSystem": {
            "type": "string",
            "description": "The MRN system."
          }
        },
        "description": "The data needed to create a Patient MRN."
      },
      "patient": {
        "type": "object",
        "properties": {
          "additionalProfileDetails": {
            "$ref": "#/components/schemas/additionalProfileDetails"
          },
          "additionalProfileDetailsString": {
            "type": "string",
            "description": "The string value of the additional profile details as stored in CDR."
          },
          "birthDate": {
            "type": "string",
            "description": "The birth date of the patient."
          },
          "caseId": {
            "$ref": "#/components/schemas/uuid",
            "description": "The case id, used as input from the front end when updating a specific case while updating a patient."
          },
          "firstName": {
            "type": "string",
            "description": "The given name."
          },
          "gender": {
            "type": "string",
            "description": "The gender, which may be male, female, other, or unknown."
          },
          "generalPractitioners": {
            "minItems": 0,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "guid": {
            "$ref": "#/components/schemas/uuid",
            "description": "The guid of the Patient resource stored in CDR."
          },
          "lastName": {
            "type": "string",
            "description": "The family name."
          },
          "lastUpdated": {
            "type": "string",
            "description": "The timestamp, derived from CDR, of when the Patient resource was last updated."
          },
          "managingOrganization": {
            "type": "string",
            "description": "The managing organization."
          },
          "medicalRecordNumber": {
            "type": "string",
            "description": "The medical record number of the patient."
          },
          "middleName": {
            "type": "string",
            "description": "The middle name."
          },
          "mrnModel": {
            "$ref": "#/components/schemas/mrnModel"
          },
          "oraId": {
            "type": "string",
            "description": "The ORA id of the Patient, if applicable."
          },
          "simpleCaseDetails": {
            "minItems": 0,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/simpleCaseDetails"
            }
          },
          "simpleCaseDetailsString": {
            "type": "string",
            "description": "The string value of the simple case details object as mapped from the CDR resource. This should be turned into an object and set as the simpleCaseDetails field."
          },
          "active": {
            "type": "boolean",
            "description": "The indicates whether the patient is active or has been de-identified and purged."
          },
          "surgeonReference": {
            "type": "string",
            "description": "The surgeon reference, not assigned to the Patient resource itself, but used when initially creating a Patient and case."
          },
          "tags": {
            "minItems": 0,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "textName": {
            "type": "string",
            "description": "The text name."
          },
          "versionId": {
            "type": "string",
            "description": "The version id of the Patient resource stored in CDR."
          }
        },
        "description": "The patient data."
      },
      "simpleCaseDetails": {
        "type": "object",
        "properties": {
          "careTeamReferences": {
            "minItems": 0,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "careTeams": {
            "minItems": 0,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/careTeams"
            }
          },
          "caseName": {
            "type": "string",
            "description": "The name of the case."
          },
          "caseStatus": {
            "type": "string",
            "description": "The status of the case (active | completed).",
            "enum": [
              "active",
              "completed"
            ],
            "example": "active"
          },
          "eye": {
            "type": "string",
            "description": "The eye the case pertains to (OD (right) | OS (left)).",
            "enum": [
              "OD",
              "OS"
            ],
            "example": "OD"
          },
          "eyeAssessment": {
            "type": "object",
            "description": "The eye assessment."
          },
          "guid": {
            "$ref": "#/components/schemas/uuid",
            "description": "The guid of the case. While not individually stored in CDR, the guid helps identify each case in the JSON structure."
          },
          "lastUpdated": {
            "type": "string",
            "description": "The time stamp indicating when the case was last updated."
          },
          "status": {
            "type": "string",
            "description": "The status of the case (active, completed, cancelled)."
          },
          "surgeonName": {
            "type": "string",
            "description": "The name of the surgeon assigned to the case, as given by the Person resource associated with the Practitioner."
          },
          "surgeonReference": {
            "type": "string",
            "description": "The reference to the surgeon assigned to the case, as given by the Practitioner resource belonging to the surgeon."
          },
          "surgeryDate": {
            "type": "string",
            "description": "The date of the scheduled surgery."
          },
          "surgeryType": {
            "type": "string",
            "description": "The surgery type from the consultation."
          },
          "tags": {
            "minItems": 0,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "description": "The subset of data for each of a patient's case that is needed for display in the simple patient list list."
      },
      "summaryCase": {
        "type": "object",
        "properties": {
          "applicationName": {
            "type": "string",
            "description": "The code denoting the application the summary case is for, set in the CarePlan.category field."
          },
          "careTeams": {
            "minItems": 0,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "caseDetails": {
            "minItems": 0,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/caseDetails"
            }
          },
          "caseDetailsString": {
            "type": "string",
            "description": "The JSON string representing the superset of data for all cases for a patient within a particular application."
          },
          "patientReference": {
            "type": "string",
            "description": "The reference to the Patient resource in CDR that the summary case CarePlan belongs to."
          },
          "surgeryDates": {
            "minItems": 0,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "versionId": {
            "type": "string",
            "description": "The version id of the summary case CarePlan resource in CDR."
          },
          "additionalProfileDetails": {
            "$ref": "#/components/schemas/additionalProfileDetails"
          },
          "consultation": {
            "type": "object",
            "description": "The object, defined and managed by the front end, that contains the consultation for a patient."
          },
          "eye": {
            "type": "string",
            "description": "The eye."
          },
          "eyeAssessment": {
            "type": "object",
            "description": "The object, defined and managed by the front end, that contains the eye assessment for a patient within a case."
          },
          "guid": {
            "$ref": "#/components/schemas/uuid",
            "description": "The guid."
          },
          "lastUpdated": {
            "type": "string",
            "description": "The time stamp indicating when the object was last updated."
          },
          "measurementMasterSet": {
            "$ref": "#/components/schemas/measurementMasterSet"
          },
          "surgeryType": {
            "type": "string",
            "description": "The surgery type of the case."
          },
          "tags": {
            "minItems": 0,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "description": "The summary information for the cases for this patient."
      },
      "surgicalPlanTransform": {
        "required": [
          "keratometryUnits"
        ],
        "type": "object",
        "properties": {
          "odCaseGuid": {
            "$ref": "#/components/schemas/uuid",
            "description": "The OD case guid to include in the surgical plan PDF.",
          },
          "osCaseGuid": {
            "$ref": "#/components/schemas/uuid",
            "description": "The OS case guid to include in the surgical plan PDF.",
          },
          "odEyeIcon": {
            "type": "string",
            "description": "The OD eye icon as a base 64 encoded string to use in the surgical plan PDF."
          },
          "osEyeIcon": {
            "type": "string",
            "description": "The OS eye icon as a base 64 encoded string to use in the surgical plan PDF."
          },
          "odSurgicalPlanGuid": {
            "$ref": "#/components/schemas/uuid",
            "description": "The OD surgical plan guid to include in the surgical plan PDF."
          },
          "osSurgicalPlanGuid": {
            "$ref": "#/components/schemas/uuid",
            "description": "The OS surgical plan guid to include in the surgical plan PDF."
          },
          "odKeratometryGuid": {
            "$ref": "#/components/schemas/uuid",
            "description": "The OD keratometry measurement guid to include in the surgical plan PDF."
          },
          "osKeratometryGuid": {
            "$ref": "#/components/schemas/uuid",
            "description": "The OS keratometry measurement guid to include in the surgical plan PDF."
          },
          "keratometryUnits": {
            "type": "string",
            "description": "The keratometry units to use in the surgical plan PDF."
          },
          "odBiometryGuid": {
            "$ref": "#/components/schemas/uuid",
            "description": "The OD biometry measurement guid to include in the surgical plan PDF."
          },
          "osBiometryGuid": {
            "$ref": "#/components/schemas/uuid",
            "description": "The OS biometry measurement guid to include in the surgical plan PDF."
          },
          "dateTimeFormat": {
            "type": "string",
            "description": "The date time format to use in the surgical plan PDF.",
            "enum": [
              "DD.MM.YYYY @ hh:mm a",
              "DD-MM-YYYY @ hh:mm a",
              "DD/MM/YYYY @ hh:mm a",
              "MM-DD-YYYY @ hh:mm a",
              "MM/DD/YYYY @ hh:mm a",
              "YYYY-MM-DD @ hh:mm a",
              "YYYY/MM/DD @ hh:mm a"
            ]
          },
          "timeZone": {
            "type": "string",
            "description": "The time zone of the client (America/Chicago | America/New_York | America/Denver | America/Los_Angeles).",
            "example": "America/Chicago"
          },
          "userName": {
            "type": "string",
            "description": "The user name to be included in the surgical plan PDF."
          },
          "surgicalPlanPdfFmt": {
            "type": "string",
            "description": "The surgical plan PDF format XSLT to use.",
            "example": "smart-cataract-surgical-plan-fmt1"
          },
          "currentTime": {
            "type": "string",
            "description": "The current time of the surgical plan PDF generation formatted using the SurgicalPlanTransform dataTimeFormat and the timeZone."
          },
          "surgicalPlanPrintSelection": {
            "$ref": "#/components/schemas/uuid",
            "description": "The guid for the selected surgical plan to be printed."
          }
        },
        "description": "The surgical plan transformation input parameters needed to create a surgical plan PDF."
      },
      "SurgicalPlan": {
        "type": "object",
        "properties": {
          "additionalLenses": {
            "type": "object",
            "description": "The additional lenses used when saving a plan, as defined and managed by the front end."
          },
          "approvedStatusChangedByUserId": {
            "type": "string",
            "description": "The id of the user who changed status of the surgical plan to approved."
          },
          "approvedStatusChangedByUserName": {
            "type": "string",
            "description": "The name of the user who changed status of the surgical plan to approved."
          },
          "approvedStatusChangedOnTimeStamp": {
            "type": "string",
            "description": "The timestamp when the status of the surgical plan changed to approved."
          },
          "carePlanDetails": {
            "$ref": "#/components/schemas/carePlanDetails"
          },
          "caseDetailsReference": {
            "type": "string",
            "description": "The reference to the case details reference needed for reporting."
          },
          "caseId": {
            "$ref": "#/components/schemas/uuid",
            "description": "The id of the case the surgical plan belongs to, used in reporting."
          },
          "completedDate": {
            "type": "string",
            "description": "The date that the surgical plan was marked completed."
          },
          "devices": {
            "minItems": 0,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "elevenBoxSetsExtension": {
            "type": "object",
            "description": "The eleven box sets extension for the plan, as defined and managed by the front end."
          },
          "facility": {
            "type": "string",
            "description": "The name of the facility the plan is being sent to."
          },
          "facilityReference": {
            "type": "string",
            "description": "The reference to the facility the plan is being sent to."
          },
          "imported": {
            "type": "boolean",
            "description": "The imported plan flag."
          },
          "mfgAconstantIgnoreTimeStamp": {
            "type": "string",
            "description": "The ignore timeStamp for manufacturer A-Constant."
          },
          "planNotifications": {
            "minItems": 0,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "planStatusSelection": {
            "type": "string",
            "description": "The status of the plan (Approved and Scheduled, Scheduled Primary, etc).",
            "example": "Approved and Scheduled"
          },
          "phakicMeasurementSet": {
            "$ref": "#/components/schemas/phakicMeasurementSet"
          },
          "surgeonName": {
            "type": "string",
            "description": "The name of the surgeon assigned to the case, retrieved from the Person resource."
          },
          "surgeonPreferences": {
            "$ref": "#/components/schemas/surgeonPreferences"
          },
          "surgeonReference": {
            "type": "string",
            "description": "The Practitioner reference of the surgeon assigned to the case."
          },
          "surgeryDate": {
            "type": "string",
            "description": "The surgery date of the case."
          },
          "procedureRequestReferences": {
            "minItems": 0,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "astigmatismFix": {
            "$ref": "#/components/schemas/astigmatismFix"
          },
          "unapprovedStatusChangedByUserId": {
            "type": "string",
            "description": "The id of the user who changed status of the surgical plan to unapproved."
          },
          "unapprovedStatusChangedByUserName": {
            "type": "string",
            "description": "The name of the user who changed status of the surgical plan to unapproved."
          },
          "unapprovedStatusChangedOnTimeStamp": {
            "type": "string",
            "description": "The timestamp when the status of the surgical plan changed to unapproved."
          },
          "additionalProfileDetails": {
            "$ref": "#/components/schemas/additionalProfileDetails"
          },
          "consultation": {
            "type": "object",
            "description": "The object, defined and managed by the front end, that contains the consultation for a patient."
          },
          "eye": {
            "type": "string",
            "description": "The eye."
          },
          "eyeAssessment": {
            "type": "object",
            "description": "The object, defined and managed by the front end, that contains the eye assessment for a patient within a case."
          },
          "guid": {
            "$ref": "#/components/schemas/uuid",
            "description": "The guid."
          },
          "lastUpdated": {
            "type": "string",
            "description": "The time stamp indicating when the object was last updated."
          },
          "measurementMasterSet": {
            "$ref": "#/components/schemas/measurementMasterSet"
          },
          "surgeryType": {
            "type": "string",
            "description": "The surgery type of the case."
          },
          "tags": {
            "minItems": 0,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "Note": {
        "type": "object",
        "properties": {
          "author": {
            "type": "string",
            "description": "The author."
          },
          "caseId": {
            "$ref": "#/components/schemas/uuid",
            "description": "The uid of the CarePlan the note belongs to."
          },
          "content": {
            "type": "string",
            "description": "The content."
          },
          "creationTimeStamp": {
            "type": "string",
            "description": "The creation timestamp."
          },
          "date": {
            "type": "string",
            "description": "The date."
          },
          "flagged": {
            "type": "boolean",
            "description": "The flagged flag."
          },
          "noteType": {
            "type": "string",
            "description": "The type of note."
          },
          "read": {
            "type": "boolean",
            "description": "The read flag."
          },
          "time": {
            "type": "string",
            "description": "The time."
          },
          "timeZone": {
            "type": "string",
            "description": "The time zone."
          },
          "versionId": {
            "type": "string",
            "description": "The version id."
          },
          "guid": {
            "type": "string",
            "description": "The unique identifier of this note."
          }
        }
      },
      "ConsultationEyeAssessmentAndVisualAcuitiesObjects": {
        "type": "object",
        "properties": {
          "consultation": {
            "type": "object",
            "description": "The patient's consultation for a case."
          },
          "eyeAssessment": {
            "$ref": "#/components/schemas/eyeAssessment"
          },
          "visualAcuities": {
            "minItems": 0,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/visualAcuities"
            }
          }
        }
      },
      "PatientsAndActiveSurgeryList": {
        "type": "object",
        "properties": {
          "entries": {
            "minItems": 0,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/entries"
            }
          }
        }
      },
      "entries": {
        "type": "object",
        "properties": {
          "patient": {
            "$ref": "#/components/schemas/patient"
          },
          "surgicalPlans": {
            "minItems": 0,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/surgicalPlans"
            }
          }
        },
        "description": "The patient and active surgical plan entry list."
      }
    },
    "examples": {
      "ForbiddenExample": {
        "summary": "Forbidden - User Role",
        "description": "This is an example of the response for a forbidden status due to user role.",
        "value": "{\n    \"messages\": [{\n        \"messageTranslationId\": \"USER_ROLE_NOT_AUTHORIZED\",\n        \"messageParameters\": {\n            \"operation\": \"change practiceOrg\"\n        }\n    }],\n    \"requestId\": \"b40d8525-6689-4a15-ac06-4b223762ffce\"\n}"
      },
      "UpdateSpecificNotesAsReadResponseExample": {
        "summary": "Typical",
        "description": "This is an example of updateSpecificNotesAsRead response data.",
        "value": "{\n    \"patient\": {\n        \"additionalProfileDetails\": {\n            \"insurance\": \"\",\n            \"occupation\": \"\",\n            \"originallyFrom\": \"\",\n            \"photoUrl\": \"\",\n            \"referringDoctorName\": \"\",\n            \"referringSiteName\": \"\",\n            \"selectedSurgeon\": \"Practitioner/f1335deb-0837-4822-94dc-87cef26879f1\",\n            \"selectedSurgeonName\": \"TietronixSmoke TestSurgeon\",\n            \"isTestPatient\": \"false\",\n            \"odActiveCaseStatus\": \"false\",\n            \"workflowStatusOd\": \"patient-workflow-status-add-new-procedure\",\n            \"osActiveCaseStatus\": \"false\",\n            \"workflowStatusOs\": \"patient-workflow-status-add-new-procedure\",\n            \"coManager\": null\n        },\n        \"birthDate\": \"1950-01-03\",\n        \"firstName\": \"tdp\",\n        \"gender\": \"male\",\n        \"generalPractitioners\": [\n            \"Practitioner/f1335deb-0837-4822-94dc-87cef26879f1\"\n        ],\n        \"guid\": \"8901d68a-aa49-4a85-92bd-19a97eb8acca\",\n        \"lastName\": \"tdp\",\n        \"lastUpdated\": \"2022-01-18T19:12:32.100235+00:00\",\n        \"managingOrganization\": \"Organization/2d04fe4e-53a9-4a4e-9736-64a58c710afe\",\n        \"medicalRecordNumber\": \"CP-2798-2\",\n        \"active\": false,\n        \"tags\": [\n            \"careplan-status-no-pre-op\",\n            \"created-by-ui\",\n            \"patient-paid-practice\"\n        ],\n        \"textName\": \"tdp tdp\",\n        \"versionId\": \"9622a81e-7892-11ec-b13a-0f1a431c403e\"\n    },\n    \"procedureRequests\": [],\n    \"summaryCase\": {\n        \"careTeams\": [\n            \"CareTeam/f1335deb-0837-4822-94dc-87cef26879f1\"\n        ],\n        \"caseDetails\": [\n            {\n                \"author\": \"Practitioner/f1335deb-0837-4822-94dc-87cef26879f1\",\n                \"carePlanResourceStatus\": \"In-Progress\",\n                \"careTeamReferences\": [\n                    \"CareTeam/f1335deb-0837-4822-94dc-87cef26879f1\"\n                ],\n                \"careTeams\": [\n                    {\n                        \"guid\": \"f1335deb-0837-4822-94dc-87cef26879f1\",\n                        \"lastUpdated\": \"2022-01-18T19:09:02+00:00\",\n                        \"practitioners\": [\n                            {\n                                \"facilityReference\": [],\n                                \"reference\": \"Practitioner/9846e7bd-b079-4f47-8c68-f39739ecca8f\",\n                                \"role\": \"Ophthalmic surgeon\",\n                                \"roleCode\": \"309382008\"\n                            },\n                            {\n                                \"facilityReference\": [],\n                                \"reference\": \"Practitioner/da385539-fcb2-4541-81ea-1b988f471bfb\",\n                                \"role\": \"Ophthalmic surgeon\",\n                                \"roleCode\": \"309382008\"\n                            },\n                            {\n                                \"facilityReference\": [],\n                                \"reference\": \"Practitioner/f1335deb-0837-4822-94dc-87cef26879f1\",\n                                \"role\": \"Ophthalmic surgeon\",\n                                \"roleCode\": \"309382008\"\n                            },\n                            {\n                                \"facilityReference\": [],\n                                \"reference\": \"Practitioner/02d136d4-da96-41d0-af97-4425480901a2\",\n                                \"role\": \"technician\",\n                                \"roleCode\": \"307988006\"\n                            }\n                        ]\n                    }\n                ],\n                \"caseName\": \"Default\",\n                \"excludeFromOptimizations\": false,\n                \"notes\": [\n                    {\n                        \"author\": \"Dr. Beverly Crusher\",\n                        \"caseId\": \"ab6a6d31-5d3f-409f-afdd-d5d6bf2ed253\",\n                        \"content\": \"All they have to decide is what to do with the time that is given them.\",\n                        \"creationTimeStamp\": \"20020-04-25T13:27:03-05:00\",\n                        \"flagged\": false,\n                        \"noteType\": \"General\",\n                        \"read\": true,\n                        \"guid\": \"5fc4b1f9-bfb1-494b-936a-8757597bf745\"\n                    },\n                    {\n                        \"author\": \"Dr. Beverly Crusher\",\n                        \"caseId\": \"ab6a6d31-5d3f-409f-afdd-d5d6bf2ed253\",\n                        \"content\": \"All they have to decide is what to do with the time that is given them.\",\n                        \"creationTimeStamp\": \"20020-04-25T13:27:03-05:00\",\n                        \"flagged\": false,\n                        \"noteType\": \"General\",\n                        \"read\": false,\n                        \"guid\": \"42acd6f1-d803-4829-8797-4c99bd3133f2\"\n                    }\n                ],\n                \"procedureRequests\": [],\n                \"status\": \"Measurement,In-Progress,Consultation,Incomplete,Planning,Incomplete,Intra-Op,Incomplete,Post-Op,Incomplete\",\n                \"surgeonName\": \"TietronixSmoke TestSurgeon\",\n                \"surgeonReference\": \"Practitioner/f1335deb-0837-4822-94dc-87cef26879f1\",\n                \"surgicalPlans\": [],\n                \"eye\": \"OU\",\n                \"eyeAssessment\": {\n                    \"guid\": \"60519baa-6733-4249-aea2-6ab17a726a0e\",\n                    \"leftOs\": {\n                        \"ocularDiseases\": [],\n                        \"postRefractive\": \"No Post-Refractive\",\n                        \"status\": \"Phakic\"\n                    },\n                    \"rightOd\": {\n                        \"ocularDiseases\": [],\n                        \"postRefractive\": \"No Post-Refractive\",\n                        \"status\": \"Phakic\"\n                    }\n                },\n                \"guid\": \"ab6a6d31-5d3f-409f-afdd-d5d6bf2ed253\",\n                \"lastUpdated\": \"2022-01-18T19:12:31+00:00\",\n                \"measurementMasterSet\": {\n                    \"preOpSet\": {\n                        \"preOps\": [],\n                        \"visualAcuities\": [],\n                        \"response\": {},\n                        \"guid\": \"15e69e08-72e4-4776-a1d7-a7bf11185ff2\"\n                    },\n                    \"intraOp\": {\n                        \"oraMeasurements\": [],\n                        \"surgeryProcedureStatus\": \"\",\n                        \"implantedLensFormula\": \"\",\n                        \"implantedLensBrand\": \"\",\n                        \"implantedLensModel\": \"\",\n                        \"implantedLensToricity\": \"\",\n                        \"implantedLensPower\": \"\",\n                        \"implantedLensImplementationAngle\": \"\",\n                        \"implantedLensPredictedRefraction\": \"\",\n                        \"oraImplantedLensFormula\": \"\",\n                        \"oraImplantedLensBrand\": \"\",\n                        \"oraImplantedLensModel\": \"\",\n                        \"oraImplantedLensToricity\": \"\",\n                        \"oraImplantedLensPower\": \"\",\n                        \"oraImplantedLensImplementationAngle\": \"\",\n                        \"oraImplantedLensPredictedRefraction\": \"\",\n                        \"dmmImplantedLensFormula\": \"\",\n                        \"dmmImplantedLensBrand\": \"\",\n                        \"dmmImplantedLensModel\": \"\",\n                        \"dmmImplantedLensToricity\": \"\",\n                        \"dmmImplantedLensPower\": \"\",\n                        \"dmmImplantedLensImplementationAngle\": \"\",\n                        \"dmmImplantedLensPredictedRefraction\": \"\",\n                        \"excludeFromOptimizations\": false,\n                        \"surgeryDate\": \"\",\n                        \"source\": \"\",\n                        \"plannedLensManufacturer\": \"\",\n                        \"plannedLensModel\": \"\",\n                        \"plannedLensPower\": \"\",\n                        \"plannedLensPredictedRefraction\": \"\",\n                        \"plannedLensToricity\": \"\",\n                        \"plannedLensImplementationAngle\": \"\",\n                        \"plannedLensFormula\": \"\",\n                        \"response\": {},\n                        \"guid\": \"04e66929-1d04-405d-86ca-1f654d8bbb69\",\n                        \"dhsAscPracticeId\": \"\"\n                    },\n                    \"response\": {},\n                    \"guid\": \"000d9d38-f3e4-4f1f-bfb4-05958c3bbc73\",\n                    \"lastUpdated\": \"2022-01-18T19:12:31+00:00\"\n                },\n                \"tags\": [\n                    \"careplan-status-no-pre-op\"\n                ]\n            }\n        ],\n        \"patientReference\": \"Patient/8901d68a-aa49-4a85-92bd-19a97eb8acca\",\n        \"surgeryDates\": [],\n        \"versionId\": \"9625d908-7892-11ec-b13a-3f7a49de9317\",\n        \"guid\": \"f9f9181a-d135-4f09-8c9c-6456589fcbb8\",\n        \"lastUpdated\": \"2022-01-18T19:12:32.100235+00:00\",\n        \"tags\": [\n            \"careplan-status-no-pre-op\",\n            \"created-by-ui\",\n            \"patient-paid-practice\"\n        ],\n        \"status\": \"active\"\n    }\n}"
      },
      "UpdateConsultationEyeAssessmentAndMostRecentVisualAcuitiesRequest": {
        "summary": "Typical",
        "description": "This is an example of updateConsultationEyeAssessmentAndMostRecentVisualAcuities request data.",
        "value": "{\n    \"consultation\": {\n        \"lifestyleSurvey\": {\n            \"type\": \"dell questionnaire\",\n            \"version\": \"1.0.0\",\n            \"description\": \"2017 revision dell questionnaire\",\n            \"questions\": [\n                {\n                    \"order\": 1,\n                    \"questionText\": \"After surgery, would you be interested in seeing well without glassess in the following situations\",\n                    \"subQuestions\": [\n                        {\n                            \"order\": 1,\n                            \"questionText\": \"Distance Vision (...)\",\n                            \"possibleAnswers\": [\n                                {\n                                    \"answerText\": \"I prefer no Distance glasses\",\n                                    \"answerValue\": \"a\"\n                                },\n                                {\n                                    \"answerText\": \"I woundn't mind wearing Distance glasses\",\n                                    \"answerValue\": \"b\"\n                                }\n                            ],\n                            \"selectedAnswerValue\": \"\"\n                        },\n                        {\n                            \"order\": 2,\n                            \"questionText\": \"Mid-range Vision. (computer, menus, price tags, cooking, board games, items on a shelf) \",\n                            \"possibleAnswers\": [\n                                {\n                                    \"answerText\": \"I prefer no Mid-range glasses\",\n                                    \"answerValue\": \"a\"\n                                },\n                                {\n                                    \"answerText\": \"I woundn't mind wearing Mid-range glasses\",\n                                    \"answerValue\": \"b\"\n                                }\n                            ],\n                            \"selectedAnswerValue\": \"\"\n                        },\n                        {\n                            \"order\": 3,\n                            \"questionText\": \"Near Vision (reading books, smartphones, tablets, e-readers, sewing, detailed handwork)\",\n                            \"possibleAnswers\": [\n                                {\n                                    \"answerText\": \"I prefer no Near glasses\",\n                                    \"answerValue\": \"a\"\n                                },\n                                {\n                                    \"answerText\": \"I wouldn�t mind wearing Near glasses\",\n                                    \"answerValue\": \"b\"\n                                }\n                            ],\n                            \"selectedAnswerValue\": \"\"\n                        }\n                    ]\n                },\n                {\n                    \"order\": 2,\n                    \"questionText\": \"Please check the single statement that best describes you in terms of night vision\",\n                    \"possibleAnswers\": [\n                        {\n                            \"answerText\": \"Night vision is extremely important to me, and I require the best possible quality night vision\",\n                            \"answerValue\": \"a\"\n                        },\n                        {\n                            \"answerText\": \"I want to be able to drive comfortably at night, but I would tolerate some slight imperfections\",\n                            \"answerValue\": \"b\"\n                        },\n                        {\n                            \"answerText\": \"Night vision is not particularly important to me\",\n                            \"answerValue\": \"c\"\n                        }\n                    ],\n                    \"selectedAnswerValue\": \"\"\n                },\n                {\n                    \"order\": 3,\n                    \"questionText\": \"If you had to wear glasses after surgery for one activity, for which activity would you be most willing to use glasses?\",\n                    \"possibleAnswers\": [\n                        {\n                            \"answerText\": \"Distance Vision\",\n                            \"answerValue\": \"a\"\n                        },\n                        {\n                            \"answerText\": \"Mid-range Vision\",\n                            \"answerValue\": \"b\"\n                        },\n                        {\n                            \"answerText\": \"Near Vision\",\n                            \"answerValue\": \"c\"\n                        }\n                    ],\n                    \"selectedAnswerValue\": \"\"\n                },\n                {\n                    \"order\": 4,\n                    \"questionText\": \"Estimate approximately how far from your face you prefer to hold your reading material\",\n                    \"possibleAnswers\": [\n                        {\n                            \"answerText\": \"11 inches\",\n                            \"answerValue\": \"a\"\n                        },\n                        {\n                            \"answerText\": \"16.5 inches\",\n                            \"answerValue\": \"b\"\n                        },\n                        {\n                            \"answerText\": \"22 inches\",\n                            \"answerValue\": \"c\"\n                        }\n                    ],\n                    \"selectedAnswerValue\": \"\"\n                },\n                {\n                    \"order\": 5,\n                    \"questionText\": \"If you could have good Distance, Mid-range, and Near Vision all without glasses, but the compromise was that you might see some halos, rings, or starbursts around lights at night, would you like that option?\",\n                    \"possibleAnswers\": [\n                        {\n                            \"answerText\": \"Yes\",\n                            \"answerValue\": \"a\"\n                        },\n                        {\n                            \"answerText\": \"No\",\n                            \"answerValue\": \"b\"\n                        }\n                    ],\n                    \"selectedAnswerValue\": \"\"\n                },\n                {\n                    \"order\": 6,\n                    \"questionText\": \"If you could have good Distance and Mid-range Vision without glasses, but the compromise was that you might need glasses for the finest print at near, would you like that option?\",\n                    \"possibleAnswers\": [\n                        {\n                            \"answerText\": \"Yes\",\n                            \"answerValue\": \"a\"\n                        },\n                        {\n                            \"answerText\": \"No\",\n                            \"answerValue\": \"b\"\n                        }\n                    ],\n                    \"selectedAnswerValue\": \"\"\n                },\n                {\n                    \"order\": 7,\n                    \"questionText\": \"If you have a cataract and would like to reduce or eliminate the need for glasses, insurance may cover a significant portion of your overall procedure cost. Would you be interested?\",\n                    \"possibleAnswers\": [\n                        {\n                            \"answerText\": \"Yes\",\n                            \"answerValue\": \"a\"\n                        },\n                        {\n                            \"answerText\": \"No\",\n                            \"answerValue\": \"b\"\n                        },\n                        {\n                            \"answerText\": \"Maybe, it depends on how much is covered by insurance\",\n                            \"answerValue\": \"c\"\n                        }\n                    ],\n                    \"selectedAnswerValue\": \"\"\n                },\n                {\n                    \"order\": 8,\n                    \"questionText\": \"Describe your personality\",\n                    \"possibleAnswers\": [\n                        {\n                            \"answerText\": \"Easy going\",\n                            \"answerValue\": \"a\"\n                        },\n                        {\n                            \"answerText\": \"Mostly easy going\",\n                            \"answerValue\": \"b\"\n                        },\n                        {\n                            \"answerText\": \"Perfectionist about most things\",\n                            \"answerValue\": \"c\"\n                        },\n                        {\n                            \"answerText\": \"Perfectionist\",\n                            \"answerValue\": \"d\"\n                        }\n                    ],\n                    \"selectedAnswerValue\": \"\"\n                }\n            ]\n        },\n        \"patientSurgeryPreferences\": {\n            \"lensPreference\": [],\n            \"eyeGlasses\": true\n        },\n        \"surgeonRecommendation\": {\n            \"rightOd\": {},\n            \"leftOs\": {\n                \"lensType\": \"Toric\"\n            }\n        },\n        \"consultationDate\": \"2020-04-03\"\n    },\n    \"eyeAssessment\": {\n        \"dominantEye\": \"OD\",\n        \"rightOd\": {\n            \"status\": \"Phakic\",\n            \"postRefractive\": \"No Post-Refractive\",\n            \"ocularDisease\": \"None\",\n            \"slitLamp\": \"None\",\n            \"refractiveSurgeries\": [],\n            \"lensSurgeries\": [],\n            \"otherSurgeries\": [],\n            \"refactionVisualAcuityAssessments\": [\n                {\n                    \"refractions\": [\n                        {\n                            \"axis\": \"\",\n                            \"cyl\": \"\",\n                            \"seq\": \"\",\n                            \"sph\": \"\",\n                            \"method\": \"Subjective MR\",\n                            \"intAdd\": \"\",\n                            \"nearAdd\": \"\",\n                            \"response\": {}\n                        }\n                    ],\n                    \"assessments\": [\n                        {\n                            \"type\": \"Pinhole\"\n                        }\n                    ],\n                    \"visualAcuity\": {\n                        \"eye\": \"\",\n                        \"ucva\": \"2.000\",\n                        \"bcva\": \"2.000\",\n                        \"ucnva\": \"2.000\",\n                        \"bcnva\": \"2.000\",\n                        \"uciva\": \"2.000\",\n                        \"bciva\": \"2.000\",\n                        \"visualAcuityUnit\": \"Decimal\"\n                    }\n                }\n            ]\n        },\n        \"leftOs\": {\n            \"status\": \"Phakic\",\n            \"postRefractive\": \"No Post-Refractive\",\n            \"ocularDisease\": \"None\",\n            \"slitLamp\": \"None\",\n            \"refractiveSurgeries\": [],\n            \"lensSurgeries\": [],\n            \"otherSurgeries\": [],\n            \"refactionVisualAcuityAssessments\": [\n                {\n                    \"refractions\": [\n                        {\n                            \"axis\": \"\",\n                            \"cyl\": \"\",\n                            \"seq\": \"\",\n                            \"sph\": \"\",\n                            \"method\": \"Subjective MR\",\n                            \"intAdd\": \"\",\n                            \"nearAdd\": \"\",\n                            \"response\": {}\n                        }\n                    ],\n                    \"assessments\": [\n                        {\n                            \"type\": \"Pinhole\"\n                        }\n                    ],\n                    \"visualAcuity\": {\n                        \"eye\": \"\",\n                        \"ucva\": \"2.000\",\n                        \"bcva\": \"2.000\",\n                        \"ucnva\": \"2.000\",\n                        \"bcnva\": \"2.000\",\n                        \"uciva\": \"2.000\",\n                        \"bciva\": \"2.000\",\n                        \"visualAcuityUnit\": \"Decimal\"\n                    }\n                }\n            ]\n        },\n        \"refraction\": null\n    },\n    \"visualAcuities\": [\n        {\n            \"caseId\": \"58ce0ac0-8353-43e3-b17f-ed9fcd7c5061\",\n            \"technician\": \"\",\n            \"eye\": \"OD\",\n            \"ucva\": \"2.000\",\n            \"bcva\": \"2.000\",\n            \"ucnva\": \"2.000\",\n            \"bcnva\": \"2.000\",\n            \"uciva\": \"2.000\",\n            \"bciva\": \"2.000\",\n            \"visualAcuityUnit\": \"Decimal\"\n        },\n        {\n            \"caseId\": \"58ce0ac0-8353-43e3-b17f-ed9fcd7c5061\",\n            \"technician\": \"\",\n            \"eye\": \"OS\",\n            \"ucva\": \"2.000\",\n            \"bcva\": \"2.000\",\n            \"ucnva\": \"2.000\",\n            \"bcnva\": \"2.000\",\n            \"uciva\": \"2.000\",\n            \"bciva\": \"2.000\",\n            \"visualAcuityUnit\": \"Decimal\"\n        }\n    ]\n}"
      },
      "InternalServerErrorExample": {
        "summary": "Internal Server Error - FHIR Buffer",
        "description": "This is an example of the response for an internal server error due to FHIR buffer length.",
        "value": "{\n    \"messages\": [{\n        \"messageTranslationId\": \"FHIR_EXCEPTION_ERROR\",\n        \"messageParameters\": {\n            \"issue-details-text\": \"value is longer than permitted maximum length of 1 MB (1048576 bytes)\",\n            \"issue-type-code(0)\": \"Invalid Content\",\n            \"issue-location(0)\": \"Bundle.entry[1].resource.ofType(CarePlan).extension[0].value.ofType(string) (line 1, col 1225538)\"\n        }\n    }],\n    \"requestId\": \"b40d8525-6689-4a15-ac06-4b223762ffce\"\n}"
      },
      "BadRequestExample": {
        "summary": "Bad Request - Null Eye",
        "description": "This is an example of the response for a bad request status due to a null eye.",
        "value": "{\n    \"messages\": [\n        {\n            \"messageTranslationId\": \"NULL_FIELD,\",\n            \"messageParameters\": {\n                \"field \": \"eye\"\n            }\n        }\n    ],\n    \"requestId\": \"4592a4c1-d4dc-4847-b0a0-9cd413ecff43\"\n}"
      }
    }
  }
}
